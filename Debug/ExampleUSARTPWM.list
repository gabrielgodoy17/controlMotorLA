
ExampleUSARTPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003308  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003414  08003414  00013414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034dc  080034dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080034dc  080034dc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034dc  080034dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034dc  080034dc  000134dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034e0  080034e0  000134e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080034e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  08003554  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08003554  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b687  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bed  00000000  00000000  0002b720  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bd8  00000000  00000000  0002d310  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af0  00000000  00000000  0002dee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015631  00000000  00000000  0002e9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008bcb  00000000  00000000  00044009  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072f35  00000000  00000000  0004cbd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bfb09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036c8  00000000  00000000  000bfb84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080033fc 	.word	0x080033fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080033fc 	.word	0x080033fc

0800014c <interpreteComando>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */
void interpreteComando(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

	uint32_t duty_cycle;
	double consigna;

	switch(buffer[0]){
 8000150:	4b0b      	ldr	r3, [pc, #44]	; (8000180 <interpreteComando+0x34>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b57      	cmp	r3, #87	; 0x57
 8000156:	d002      	beq.n	800015e <interpreteComando+0x12>
 8000158:	2b77      	cmp	r3, #119	; 0x77
 800015a:	d000      	beq.n	800015e <interpreteComando+0x12>
//			imprimir = 1;

		}
	}

}
 800015c:	e00d      	b.n	800017a <interpreteComando+0x2e>
		switch(buffer[1]){
 800015e:	4b08      	ldr	r3, [pc, #32]	; (8000180 <interpreteComando+0x34>)
 8000160:	785b      	ldrb	r3, [r3, #1]
 8000162:	2b49      	cmp	r3, #73	; 0x49
 8000164:	d001      	beq.n	800016a <interpreteComando+0x1e>
 8000166:	2b69      	cmp	r3, #105	; 0x69
 8000168:	d104      	bne.n	8000174 <interpreteComando+0x28>
			printf("\r\n comando recibido \r\n");
 800016a:	4806      	ldr	r0, [pc, #24]	; (8000184 <interpreteComando+0x38>)
 800016c:	f002 fc86 	bl	8002a7c <puts>
			break;
 8000170:	bf00      	nop
}
 8000172:	e002      	b.n	800017a <interpreteComando+0x2e>
			printf("\r\n comando recibido default\r\n");
 8000174:	4804      	ldr	r0, [pc, #16]	; (8000188 <interpreteComando+0x3c>)
 8000176:	f002 fc81 	bl	8002a7c <puts>
}
 800017a:	bf00      	nop
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	200000dc 	.word	0x200000dc
 8000184:	08003414 	.word	0x08003414
 8000188:	0800342c 	.word	0x0800342c

0800018c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000190:	f000 fbfe 	bl	8000990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000194:	f000 f8a6 	bl	80002e4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  RetargetInit(&huart1);
 8000198:	4810      	ldr	r0, [pc, #64]	; (80001dc <main+0x50>)
 800019a:	f000 f9a7 	bl	80004ec <RetargetInit>

  HAL_UART_Receive_IT(&huart1, &byte, 1);
 800019e:	2201      	movs	r2, #1
 80001a0:	490f      	ldr	r1, [pc, #60]	; (80001e0 <main+0x54>)
 80001a2:	480e      	ldr	r0, [pc, #56]	; (80001dc <main+0x50>)
 80001a4:	f002 f836 	bl	8002214 <HAL_UART_Receive_IT>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001a8:	f000 f95a 	bl	8000460 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001ac:	f000 f8d6 	bl	800035c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80001b0:	f000 f92c 	bl	800040c <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80001b4:	2201      	movs	r2, #1
 80001b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ba:	480a      	ldr	r0, [pc, #40]	; (80001e4 <main+0x58>)
 80001bc:	f000 ff4a 	bl	8001054 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80001c0:	2064      	movs	r0, #100	; 0x64
 80001c2:	f000 fc47 	bl	8000a54 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80001c6:	2200      	movs	r2, #0
 80001c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001cc:	4805      	ldr	r0, [pc, #20]	; (80001e4 <main+0x58>)
 80001ce:	f000 ff41 	bl	8001054 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80001d2:	2064      	movs	r0, #100	; 0x64
 80001d4:	f000 fc3e 	bl	8000a54 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80001d8:	e7ec      	b.n	80001b4 <main+0x28>
 80001da:	bf00      	nop
 80001dc:	2000009c 	.word	0x2000009c
 80001e0:	200000f0 	.word	0x200000f0
 80001e4:	40011000 	.word	0x40011000

080001e8 <HAL_UART_RxCpltCallback>:
  }
  /* USER CODE END 3 */
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]

	  if (huart->Instance == USART1)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a35      	ldr	r2, [pc, #212]	; (80002cc <HAL_UART_RxCpltCallback+0xe4>)
 80001f6:	4293      	cmp	r3, r2
 80001f8:	d163      	bne.n	80002c2 <HAL_UART_RxCpltCallback+0xda>
	  {
	    /* Transmit one byte with 100 ms timeout */
	    //HAL_UART_Transmit(&huart2, &byte, 1, 100);

		  switch(byte){
 80001fa:	4b35      	ldr	r3, [pc, #212]	; (80002d0 <HAL_UART_RxCpltCallback+0xe8>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	2b0d      	cmp	r3, #13
 8000200:	d016      	beq.n	8000230 <HAL_UART_RxCpltCallback+0x48>
 8000202:	2b0d      	cmp	r3, #13
 8000204:	dc02      	bgt.n	800020c <HAL_UART_RxCpltCallback+0x24>
 8000206:	2b08      	cmp	r3, #8
 8000208:	d028      	beq.n	800025c <HAL_UART_RxCpltCallback+0x74>
 800020a:	e036      	b.n	800027a <HAL_UART_RxCpltCallback+0x92>
 800020c:	2b3a      	cmp	r3, #58	; 0x3a
 800020e:	d002      	beq.n	8000216 <HAL_UART_RxCpltCallback+0x2e>
 8000210:	2b3b      	cmp	r3, #59	; 0x3b
 8000212:	d00d      	beq.n	8000230 <HAL_UART_RxCpltCallback+0x48>
 8000214:	e031      	b.n	800027a <HAL_UART_RxCpltCallback+0x92>
		  	  case ':': //Comienzo de la trama
		  		  flagRx = 1;
 8000216:	4b2f      	ldr	r3, [pc, #188]	; (80002d4 <HAL_UART_RxCpltCallback+0xec>)
 8000218:	2201      	movs	r2, #1
 800021a:	701a      	strb	r2, [r3, #0]
		  		  HAL_UART_Transmit(&huart1, &byte, 1, 100);
 800021c:	2364      	movs	r3, #100	; 0x64
 800021e:	2201      	movs	r2, #1
 8000220:	492b      	ldr	r1, [pc, #172]	; (80002d0 <HAL_UART_RxCpltCallback+0xe8>)
 8000222:	482d      	ldr	r0, [pc, #180]	; (80002d8 <HAL_UART_RxCpltCallback+0xf0>)
 8000224:	f001 feb7 	bl	8001f96 <HAL_UART_Transmit>
		  		  indRx = 0;
 8000228:	4b2c      	ldr	r3, [pc, #176]	; (80002dc <HAL_UART_RxCpltCallback+0xf4>)
 800022a:	2200      	movs	r2, #0
 800022c:	701a      	strb	r2, [r3, #0]
		  		  break;
 800022e:	e043      	b.n	80002b8 <HAL_UART_RxCpltCallback+0xd0>
		  	  case '\r': //Retorno, fin de trama.
		  	  case ';':  //Fin de trama.
		  		HAL_UART_Transmit(&huart1, &byte, 1, 100);
 8000230:	2364      	movs	r3, #100	; 0x64
 8000232:	2201      	movs	r2, #1
 8000234:	4926      	ldr	r1, [pc, #152]	; (80002d0 <HAL_UART_RxCpltCallback+0xe8>)
 8000236:	4828      	ldr	r0, [pc, #160]	; (80002d8 <HAL_UART_RxCpltCallback+0xf0>)
 8000238:	f001 fead 	bl	8001f96 <HAL_UART_Transmit>
		  		  if(flagRx){
 800023c:	4b25      	ldr	r3, [pc, #148]	; (80002d4 <HAL_UART_RxCpltCallback+0xec>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d036      	beq.n	80002b2 <HAL_UART_RxCpltCallback+0xca>
		  			flagRx = 0;
 8000244:	4b23      	ldr	r3, [pc, #140]	; (80002d4 <HAL_UART_RxCpltCallback+0xec>)
 8000246:	2200      	movs	r2, #0
 8000248:	701a      	strb	r2, [r3, #0]
		  			buffer[indRx] = 0;
 800024a:	4b24      	ldr	r3, [pc, #144]	; (80002dc <HAL_UART_RxCpltCallback+0xf4>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	461a      	mov	r2, r3
 8000250:	4b23      	ldr	r3, [pc, #140]	; (80002e0 <HAL_UART_RxCpltCallback+0xf8>)
 8000252:	2100      	movs	r1, #0
 8000254:	5499      	strb	r1, [r3, r2]
		  			interpreteComando();
 8000256:	f7ff ff79 	bl	800014c <interpreteComando>
		  		  }
		  		  break;
 800025a:	e02a      	b.n	80002b2 <HAL_UART_RxCpltCallback+0xca>
		  	  case 8: //Retroceso es permitido de esta manera.

		  		  if(flagRx){
 800025c:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <HAL_UART_RxCpltCallback+0xec>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d028      	beq.n	80002b6 <HAL_UART_RxCpltCallback+0xce>
		  			  if(indRx > 0) indRx--;
 8000264:	4b1d      	ldr	r3, [pc, #116]	; (80002dc <HAL_UART_RxCpltCallback+0xf4>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d024      	beq.n	80002b6 <HAL_UART_RxCpltCallback+0xce>
 800026c:	4b1b      	ldr	r3, [pc, #108]	; (80002dc <HAL_UART_RxCpltCallback+0xf4>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	3b01      	subs	r3, #1
 8000272:	b2da      	uxtb	r2, r3
 8000274:	4b19      	ldr	r3, [pc, #100]	; (80002dc <HAL_UART_RxCpltCallback+0xf4>)
 8000276:	701a      	strb	r2, [r3, #0]
		  		  }
		  		  break;
 8000278:	e01d      	b.n	80002b6 <HAL_UART_RxCpltCallback+0xce>
		  	  default: //Almacenamiento de la trama.
		  		HAL_UART_Transmit(&huart1, &byte, 1, 100);
 800027a:	2364      	movs	r3, #100	; 0x64
 800027c:	2201      	movs	r2, #1
 800027e:	4914      	ldr	r1, [pc, #80]	; (80002d0 <HAL_UART_RxCpltCallback+0xe8>)
 8000280:	4815      	ldr	r0, [pc, #84]	; (80002d8 <HAL_UART_RxCpltCallback+0xf0>)
 8000282:	f001 fe88 	bl	8001f96 <HAL_UART_Transmit>
		  		  if(flagRx){
 8000286:	4b13      	ldr	r3, [pc, #76]	; (80002d4 <HAL_UART_RxCpltCallback+0xec>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d014      	beq.n	80002b8 <HAL_UART_RxCpltCallback+0xd0>
		  			  buffer[indRx] = byte;
 800028e:	4b13      	ldr	r3, [pc, #76]	; (80002dc <HAL_UART_RxCpltCallback+0xf4>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	461a      	mov	r2, r3
 8000294:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <HAL_UART_RxCpltCallback+0xe8>)
 8000296:	7819      	ldrb	r1, [r3, #0]
 8000298:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <HAL_UART_RxCpltCallback+0xf8>)
 800029a:	5499      	strb	r1, [r3, r2]
		  			  if(indRx < MAX_BUFFER - 1) indRx++;
 800029c:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <HAL_UART_RxCpltCallback+0xf4>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b12      	cmp	r3, #18
 80002a2:	d809      	bhi.n	80002b8 <HAL_UART_RxCpltCallback+0xd0>
 80002a4:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <HAL_UART_RxCpltCallback+0xf4>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	3301      	adds	r3, #1
 80002aa:	b2da      	uxtb	r2, r3
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <HAL_UART_RxCpltCallback+0xf4>)
 80002ae:	701a      	strb	r2, [r3, #0]
 80002b0:	e002      	b.n	80002b8 <HAL_UART_RxCpltCallback+0xd0>
		  		  break;
 80002b2:	bf00      	nop
 80002b4:	e000      	b.n	80002b8 <HAL_UART_RxCpltCallback+0xd0>
		  		  break;
 80002b6:	bf00      	nop
		  		  }
		  }

	    /* Receive one byte in interrupt mode */
	    HAL_UART_Receive_IT(&huart1, &byte, 1);
 80002b8:	2201      	movs	r2, #1
 80002ba:	4905      	ldr	r1, [pc, #20]	; (80002d0 <HAL_UART_RxCpltCallback+0xe8>)
 80002bc:	4806      	ldr	r0, [pc, #24]	; (80002d8 <HAL_UART_RxCpltCallback+0xf0>)
 80002be:	f001 ffa9 	bl	8002214 <HAL_UART_Receive_IT>
	  }
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40013800 	.word	0x40013800
 80002d0:	200000f0 	.word	0x200000f0
 80002d4:	20000098 	.word	0x20000098
 80002d8:	2000009c 	.word	0x2000009c
 80002dc:	20000099 	.word	0x20000099
 80002e0:	200000dc 	.word	0x200000dc

080002e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b090      	sub	sp, #64	; 0x40
 80002e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ea:	f107 0318 	add.w	r3, r7, #24
 80002ee:	2228      	movs	r2, #40	; 0x28
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f002 fb5e 	bl	80029b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
 8000304:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000306:	2302      	movs	r3, #2
 8000308:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030a:	2301      	movs	r3, #1
 800030c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030e:	2310      	movs	r3, #16
 8000310:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000312:	2300      	movs	r3, #0
 8000314:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	f107 0318 	add.w	r3, r7, #24
 800031a:	4618      	mov	r0, r3
 800031c:	f000 feb2 	bl	8001084 <HAL_RCC_OscConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000326:	f000 f8db 	bl	80004e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032a:	230f      	movs	r3, #15
 800032c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800032e:	2300      	movs	r3, #0
 8000330:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f001 f91e 	bl	8001584 <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800034e:	f000 f8c7 	bl	80004e0 <Error_Handler>
  }
}
 8000352:	bf00      	nop
 8000354:	3740      	adds	r7, #64	; 0x40
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
	...

0800035c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b08a      	sub	sp, #40	; 0x28
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000362:	f107 0320 	add.w	r3, r7, #32
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]
 8000378:	611a      	str	r2, [r3, #16]
 800037a:	615a      	str	r2, [r3, #20]
 800037c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800037e:	4b22      	ldr	r3, [pc, #136]	; (8000408 <MX_TIM2_Init+0xac>)
 8000380:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000384:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000386:	4b20      	ldr	r3, [pc, #128]	; (8000408 <MX_TIM2_Init+0xac>)
 8000388:	2200      	movs	r2, #0
 800038a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800038c:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <MX_TIM2_Init+0xac>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000392:	4b1d      	ldr	r3, [pc, #116]	; (8000408 <MX_TIM2_Init+0xac>)
 8000394:	2200      	movs	r2, #0
 8000396:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000398:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <MX_TIM2_Init+0xac>)
 800039a:	2200      	movs	r2, #0
 800039c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800039e:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <MX_TIM2_Init+0xac>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003a4:	4818      	ldr	r0, [pc, #96]	; (8000408 <MX_TIM2_Init+0xac>)
 80003a6:	f001 fa89 	bl	80018bc <HAL_TIM_PWM_Init>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80003b0:	f000 f896 	bl	80004e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003b4:	2300      	movs	r3, #0
 80003b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b8:	2300      	movs	r3, #0
 80003ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003bc:	f107 0320 	add.w	r3, r7, #32
 80003c0:	4619      	mov	r1, r3
 80003c2:	4811      	ldr	r0, [pc, #68]	; (8000408 <MX_TIM2_Init+0xac>)
 80003c4:	f001 fd56 	bl	8001e74 <HAL_TIMEx_MasterConfigSynchronization>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80003ce:	f000 f887 	bl	80004e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003d2:	2360      	movs	r3, #96	; 0x60
 80003d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003da:	2300      	movs	r3, #0
 80003dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003de:	2300      	movs	r3, #0
 80003e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	4619      	mov	r1, r3
 80003e8:	4807      	ldr	r0, [pc, #28]	; (8000408 <MX_TIM2_Init+0xac>)
 80003ea:	f001 fa93 	bl	8001914 <HAL_TIM_PWM_ConfigChannel>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80003f4:	f000 f874 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003f8:	4803      	ldr	r0, [pc, #12]	; (8000408 <MX_TIM2_Init+0xac>)
 80003fa:	f000 f98b 	bl	8000714 <HAL_TIM_MspPostInit>

}
 80003fe:	bf00      	nop
 8000400:	3728      	adds	r7, #40	; 0x28
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	200000f4 	.word	0x200000f4

0800040c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000410:	4b11      	ldr	r3, [pc, #68]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000412:	4a12      	ldr	r2, [pc, #72]	; (800045c <MX_USART1_UART_Init+0x50>)
 8000414:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000416:	4b10      	ldr	r3, [pc, #64]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800041c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800041e:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800042a:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000430:	4b09      	ldr	r3, [pc, #36]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000432:	220c      	movs	r2, #12
 8000434:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000436:	4b08      	ldr	r3, [pc, #32]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 800043e:	2200      	movs	r2, #0
 8000440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000442:	4805      	ldr	r0, [pc, #20]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000444:	f001 fd5a 	bl	8001efc <HAL_UART_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800044e:	f000 f847 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	2000009c 	.word	0x2000009c
 800045c:	40013800 	.word	0x40013800

08000460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b086      	sub	sp, #24
 8000464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000466:	f107 0308 	add.w	r3, r7, #8
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <MX_GPIO_Init+0x78>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a17      	ldr	r2, [pc, #92]	; (80004d8 <MX_GPIO_Init+0x78>)
 800047a:	f043 0310 	orr.w	r3, r3, #16
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <MX_GPIO_Init+0x78>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0310 	and.w	r3, r3, #16
 8000488:	607b      	str	r3, [r7, #4]
 800048a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <MX_GPIO_Init+0x78>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a11      	ldr	r2, [pc, #68]	; (80004d8 <MX_GPIO_Init+0x78>)
 8000492:	f043 0304 	orr.w	r3, r3, #4
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <MX_GPIO_Init+0x78>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0304 	and.w	r3, r3, #4
 80004a0:	603b      	str	r3, [r7, #0]
 80004a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004aa:	480c      	ldr	r0, [pc, #48]	; (80004dc <MX_GPIO_Init+0x7c>)
 80004ac:	f000 fdd2 	bl	8001054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b6:	2301      	movs	r3, #1
 80004b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004be:	2302      	movs	r3, #2
 80004c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004c2:	f107 0308 	add.w	r3, r7, #8
 80004c6:	4619      	mov	r1, r3
 80004c8:	4804      	ldr	r0, [pc, #16]	; (80004dc <MX_GPIO_Init+0x7c>)
 80004ca:	f000 fc69 	bl	8000da0 <HAL_GPIO_Init>

}
 80004ce:	bf00      	nop
 80004d0:	3718      	adds	r7, #24
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40011000 	.word	0x40011000

080004e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr

080004ec <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80004f4:	4a07      	ldr	r2, [pc, #28]	; (8000514 <RetargetInit+0x28>)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80004fa:	4b07      	ldr	r3, [pc, #28]	; (8000518 <RetargetInit+0x2c>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	6898      	ldr	r0, [r3, #8]
 8000500:	2300      	movs	r3, #0
 8000502:	2202      	movs	r2, #2
 8000504:	2100      	movs	r1, #0
 8000506:	f002 fac1 	bl	8002a8c <setvbuf>
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000134 	.word	0x20000134
 8000518:	2000000c 	.word	0x2000000c

0800051c <_isatty>:

int _isatty(int fd) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b00      	cmp	r3, #0
 8000528:	db04      	blt.n	8000534 <_isatty+0x18>
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b02      	cmp	r3, #2
 800052e:	dc01      	bgt.n	8000534 <_isatty+0x18>
    return 1;
 8000530:	2301      	movs	r3, #1
 8000532:	e005      	b.n	8000540 <_isatty+0x24>

  errno = EBADF;
 8000534:	f002 fa14 	bl	8002960 <__errno>
 8000538:	4602      	mov	r2, r0
 800053a:	2309      	movs	r3, #9
 800053c:	6013      	str	r3, [r2, #0]
  return 0;
 800053e:	2300      	movs	r3, #0
}
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <_write>:

int _write(int fd, char* ptr, int len) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d002      	beq.n	8000560 <_write+0x18>
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	2b02      	cmp	r3, #2
 800055e:	d111      	bne.n	8000584 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000560:	4b0e      	ldr	r3, [pc, #56]	; (800059c <_write+0x54>)
 8000562:	6818      	ldr	r0, [r3, #0]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	b29a      	uxth	r2, r3
 8000568:	f04f 33ff 	mov.w	r3, #4294967295
 800056c:	68b9      	ldr	r1, [r7, #8]
 800056e:	f001 fd12 	bl	8001f96 <HAL_UART_Transmit>
 8000572:	4603      	mov	r3, r0
 8000574:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000576:	7dfb      	ldrb	r3, [r7, #23]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d101      	bne.n	8000580 <_write+0x38>
      return len;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	e008      	b.n	8000592 <_write+0x4a>
    else
      return EIO;
 8000580:	2305      	movs	r3, #5
 8000582:	e006      	b.n	8000592 <_write+0x4a>
  }
  errno = EBADF;
 8000584:	f002 f9ec 	bl	8002960 <__errno>
 8000588:	4602      	mov	r2, r0
 800058a:	2309      	movs	r3, #9
 800058c:	6013      	str	r3, [r2, #0]
  return -1;
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000592:	4618      	mov	r0, r3
 8000594:	3718      	adds	r7, #24
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000134 	.word	0x20000134

080005a0 <_close>:

int _close(int fd) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db04      	blt.n	80005b8 <_close+0x18>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	dc01      	bgt.n	80005b8 <_close+0x18>
    return 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	e006      	b.n	80005c6 <_close+0x26>

  errno = EBADF;
 80005b8:	f002 f9d2 	bl	8002960 <__errno>
 80005bc:	4602      	mov	r2, r0
 80005be:	2309      	movs	r3, #9
 80005c0:	6013      	str	r3, [r2, #0]
  return -1;
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b084      	sub	sp, #16
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	60f8      	str	r0, [r7, #12]
 80005d6:	60b9      	str	r1, [r7, #8]
 80005d8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80005da:	f002 f9c1 	bl	8002960 <__errno>
 80005de:	4602      	mov	r2, r0
 80005e0:	2309      	movs	r3, #9
 80005e2:	6013      	str	r3, [r2, #0]
  return -1;
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <_read>:

int _read(int fd, char* ptr, int len) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d110      	bne.n	8000624 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <_read+0x4c>)
 8000604:	6818      	ldr	r0, [r3, #0]
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	2201      	movs	r2, #1
 800060c:	68b9      	ldr	r1, [r7, #8]
 800060e:	f001 fd5b 	bl	80020c8 <HAL_UART_Receive>
 8000612:	4603      	mov	r3, r0
 8000614:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000616:	7dfb      	ldrb	r3, [r7, #23]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d101      	bne.n	8000620 <_read+0x30>
      return 1;
 800061c:	2301      	movs	r3, #1
 800061e:	e008      	b.n	8000632 <_read+0x42>
    else
      return EIO;
 8000620:	2305      	movs	r3, #5
 8000622:	e006      	b.n	8000632 <_read+0x42>
  }
  errno = EBADF;
 8000624:	f002 f99c 	bl	8002960 <__errno>
 8000628:	4602      	mov	r2, r0
 800062a:	2309      	movs	r3, #9
 800062c:	6013      	str	r3, [r2, #0]
  return -1;
 800062e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000632:	4618      	mov	r0, r3
 8000634:	3718      	adds	r7, #24
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000134 	.word	0x20000134

08000640 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b00      	cmp	r3, #0
 800064e:	db08      	blt.n	8000662 <_fstat+0x22>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b02      	cmp	r3, #2
 8000654:	dc05      	bgt.n	8000662 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800065c:	605a      	str	r2, [r3, #4]
    return 0;
 800065e:	2300      	movs	r3, #0
 8000660:	e005      	b.n	800066e <_fstat+0x2e>
  }

  errno = EBADF;
 8000662:	f002 f97d 	bl	8002960 <__errno>
 8000666:	4602      	mov	r2, r0
 8000668:	2309      	movs	r3, #9
 800066a:	6013      	str	r3, [r2, #0]
  return 0;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_MspInit+0x5c>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <HAL_MspInit+0x5c>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6193      	str	r3, [r2, #24]
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_MspInit+0x5c>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <HAL_MspInit+0x5c>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <HAL_MspInit+0x5c>)
 800069c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a0:	61d3      	str	r3, [r2, #28]
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <HAL_MspInit+0x5c>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <HAL_MspInit+0x60>)
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <HAL_MspInit+0x60>)
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ca:	bf00      	nop
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40010000 	.word	0x40010000

080006dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006ec:	d10b      	bne.n	8000706 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <HAL_TIM_PWM_MspInit+0x34>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	4a07      	ldr	r2, [pc, #28]	; (8000710 <HAL_TIM_PWM_MspInit+0x34>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	61d3      	str	r3, [r2, #28]
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_TIM_PWM_MspInit+0x34>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	40021000 	.word	0x40021000

08000714 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000732:	d117      	bne.n	8000764 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <HAL_TIM_MspPostInit+0x58>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a0c      	ldr	r2, [pc, #48]	; (800076c <HAL_TIM_MspPostInit+0x58>)
 800073a:	f043 0304 	orr.w	r3, r3, #4
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <HAL_TIM_MspPostInit+0x58>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0304 	and.w	r3, r3, #4
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800074c:	2301      	movs	r3, #1
 800074e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000750:	2302      	movs	r3, #2
 8000752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2302      	movs	r3, #2
 8000756:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	4619      	mov	r1, r3
 800075e:	4804      	ldr	r0, [pc, #16]	; (8000770 <HAL_TIM_MspPostInit+0x5c>)
 8000760:	f000 fb1e 	bl	8000da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000764:	bf00      	nop
 8000766:	3720      	adds	r7, #32
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40021000 	.word	0x40021000
 8000770:	40010800 	.word	0x40010800

08000774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a20      	ldr	r2, [pc, #128]	; (8000810 <HAL_UART_MspInit+0x9c>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d139      	bne.n	8000808 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <HAL_UART_MspInit+0xa0>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a1e      	ldr	r2, [pc, #120]	; (8000814 <HAL_UART_MspInit+0xa0>)
 800079a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <HAL_UART_MspInit+0xa0>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	4b19      	ldr	r3, [pc, #100]	; (8000814 <HAL_UART_MspInit+0xa0>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a18      	ldr	r2, [pc, #96]	; (8000814 <HAL_UART_MspInit+0xa0>)
 80007b2:	f043 0304 	orr.w	r3, r3, #4
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <HAL_UART_MspInit+0xa0>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0304 	and.w	r3, r3, #4
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	4619      	mov	r1, r3
 80007d8:	480f      	ldr	r0, [pc, #60]	; (8000818 <HAL_UART_MspInit+0xa4>)
 80007da:	f000 fae1 	bl	8000da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	4619      	mov	r1, r3
 80007f2:	4809      	ldr	r0, [pc, #36]	; (8000818 <HAL_UART_MspInit+0xa4>)
 80007f4:	f000 fad4 	bl	8000da0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2100      	movs	r1, #0
 80007fc:	2025      	movs	r0, #37	; 0x25
 80007fe:	f000 fa22 	bl	8000c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000802:	2025      	movs	r0, #37	; 0x25
 8000804:	f000 fa3b 	bl	8000c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000808:	bf00      	nop
 800080a:	3720      	adds	r7, #32
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40013800 	.word	0x40013800
 8000814:	40021000 	.word	0x40021000
 8000818:	40010800 	.word	0x40010800

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <HardFault_Handler+0x4>

0800082e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <MemManage_Handler+0x4>

08000834 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <BusFault_Handler+0x4>

0800083a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <UsageFault_Handler+0x4>

08000840 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000868:	f000 f8d8 	bl	8000a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}

08000870 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <USART1_IRQHandler+0x10>)
 8000876:	f001 fd21 	bl	80022bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	2000009c 	.word	0x2000009c

08000884 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <_sbrk+0x50>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d102      	bne.n	800089a <_sbrk+0x16>
		heap_end = &end;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <_sbrk+0x50>)
 8000896:	4a10      	ldr	r2, [pc, #64]	; (80008d8 <_sbrk+0x54>)
 8000898:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <_sbrk+0x50>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <_sbrk+0x50>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4413      	add	r3, r2
 80008a8:	466a      	mov	r2, sp
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d907      	bls.n	80008be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80008ae:	f002 f857 	bl	8002960 <__errno>
 80008b2:	4602      	mov	r2, r0
 80008b4:	230c      	movs	r3, #12
 80008b6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80008b8:	f04f 33ff 	mov.w	r3, #4294967295
 80008bc:	e006      	b.n	80008cc <_sbrk+0x48>
	}

	heap_end += incr;
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <_sbrk+0x50>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	4a03      	ldr	r2, [pc, #12]	; (80008d4 <_sbrk+0x50>)
 80008c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80008ca:	68fb      	ldr	r3, [r7, #12]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2000008c 	.word	0x2000008c
 80008d8:	20000140 	.word	0x20000140

080008dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <SystemInit+0x5c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a14      	ldr	r2, [pc, #80]	; (8000938 <SystemInit+0x5c>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <SystemInit+0x5c>)
 80008ee:	685a      	ldr	r2, [r3, #4]
 80008f0:	4911      	ldr	r1, [pc, #68]	; (8000938 <SystemInit+0x5c>)
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <SystemInit+0x60>)
 80008f4:	4013      	ands	r3, r2
 80008f6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <SystemInit+0x5c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <SystemInit+0x5c>)
 80008fe:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000906:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <SystemInit+0x5c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <SystemInit+0x5c>)
 800090e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000912:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <SystemInit+0x5c>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	4a07      	ldr	r2, [pc, #28]	; (8000938 <SystemInit+0x5c>)
 800091a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800091e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <SystemInit+0x5c>)
 8000922:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000926:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <SystemInit+0x64>)
 800092a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800092e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	40021000 	.word	0x40021000
 800093c:	f8ff0000 	.word	0xf8ff0000
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000944:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000946:	e003      	b.n	8000950 <LoopCopyDataInit>

08000948 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800094a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800094c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800094e:	3104      	adds	r1, #4

08000950 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000950:	480a      	ldr	r0, [pc, #40]	; (800097c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000954:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000956:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000958:	d3f6      	bcc.n	8000948 <CopyDataInit>
  ldr r2, =_sbss
 800095a:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800095c:	e002      	b.n	8000964 <LoopFillZerobss>

0800095e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000960:	f842 3b04 	str.w	r3, [r2], #4

08000964 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000966:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000968:	d3f9      	bcc.n	800095e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800096a:	f7ff ffb7 	bl	80008dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800096e:	f001 fffd 	bl	800296c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000972:	f7ff fc0b 	bl	800018c <main>
  bx lr
 8000976:	4770      	bx	lr
  ldr r3, =_sidata
 8000978:	080034e4 	.word	0x080034e4
  ldr r0, =_sdata
 800097c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000980:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000984:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000988:	20000140 	.word	0x20000140

0800098c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800098c:	e7fe      	b.n	800098c <ADC1_2_IRQHandler>
	...

08000990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_Init+0x28>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <HAL_Init+0x28>)
 800099a:	f043 0310 	orr.w	r3, r3, #16
 800099e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a0:	2003      	movs	r0, #3
 80009a2:	f000 f945 	bl	8000c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f000 f808 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ac:	f7ff fe64 	bl	8000678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40022000 	.word	0x40022000

080009bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_InitTick+0x54>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_InitTick+0x58>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4619      	mov	r1, r3
 80009ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f95d 	bl	8000c9a <HAL_SYSTICK_Config>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e00e      	b.n	8000a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b0f      	cmp	r3, #15
 80009ee:	d80a      	bhi.n	8000a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f0:	2200      	movs	r2, #0
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295
 80009f8:	f000 f925 	bl	8000c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <HAL_InitTick+0x5c>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e000      	b.n	8000a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000004 	.word	0x20000004

08000a1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <HAL_IncTick+0x1c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_IncTick+0x20>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4a03      	ldr	r2, [pc, #12]	; (8000a3c <HAL_IncTick+0x20>)
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	20000138 	.word	0x20000138

08000a40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return uwTick;
 8000a44:	4b02      	ldr	r3, [pc, #8]	; (8000a50 <HAL_GetTick+0x10>)
 8000a46:	681b      	ldr	r3, [r3, #0]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	20000138 	.word	0x20000138

08000a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a5c:	f7ff fff0 	bl	8000a40 <HAL_GetTick>
 8000a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a6c:	d005      	beq.n	8000a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_Delay+0x40>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4413      	add	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a7a:	bf00      	nop
 8000a7c:	f7ff ffe0 	bl	8000a40 <HAL_GetTick>
 8000a80:	4602      	mov	r2, r0
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d8f7      	bhi.n	8000a7c <HAL_Delay+0x28>
  {
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000008 	.word	0x20000008

08000a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aca:	4a04      	ldr	r2, [pc, #16]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	60d3      	str	r3, [r2, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	db0b      	blt.n	8000b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	f003 021f 	and.w	r2, r3, #31
 8000b14:	4906      	ldr	r1, [pc, #24]	; (8000b30 <__NVIC_EnableIRQ+0x34>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	; (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	; (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	; 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	; 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bfc:	d301      	bcc.n	8000c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00f      	b.n	8000c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <SysTick_Config+0x40>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f7ff ff90 	bl	8000b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <SysTick_Config+0x40>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <SysTick_Config+0x40>)
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	e000e010 	.word	0xe000e010

08000c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ff2d 	bl	8000a98 <__NVIC_SetPriorityGrouping>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c58:	f7ff ff42 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	68b9      	ldr	r1, [r7, #8]
 8000c62:	6978      	ldr	r0, [r7, #20]
 8000c64:	f7ff ff90 	bl	8000b88 <NVIC_EncodePriority>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff5f 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c76:	bf00      	nop
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff35 	bl	8000afc <__NVIC_EnableIRQ>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ffa2 	bl	8000bec <SysTick_Config>
 8000ca8:	4603      	mov	r3, r0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d005      	beq.n	8000cd6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2204      	movs	r2, #4
 8000cce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	73fb      	strb	r3, [r7, #15]
 8000cd4:	e051      	b.n	8000d7a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f022 020e 	bic.w	r2, r2, #14
 8000ce4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f022 0201 	bic.w	r2, r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a22      	ldr	r2, [pc, #136]	; (8000d84 <HAL_DMA_Abort_IT+0xd0>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d029      	beq.n	8000d54 <HAL_DMA_Abort_IT+0xa0>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a20      	ldr	r2, [pc, #128]	; (8000d88 <HAL_DMA_Abort_IT+0xd4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d022      	beq.n	8000d50 <HAL_DMA_Abort_IT+0x9c>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a1f      	ldr	r2, [pc, #124]	; (8000d8c <HAL_DMA_Abort_IT+0xd8>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d01a      	beq.n	8000d4a <HAL_DMA_Abort_IT+0x96>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a1d      	ldr	r2, [pc, #116]	; (8000d90 <HAL_DMA_Abort_IT+0xdc>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d012      	beq.n	8000d44 <HAL_DMA_Abort_IT+0x90>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a1c      	ldr	r2, [pc, #112]	; (8000d94 <HAL_DMA_Abort_IT+0xe0>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d00a      	beq.n	8000d3e <HAL_DMA_Abort_IT+0x8a>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a1a      	ldr	r2, [pc, #104]	; (8000d98 <HAL_DMA_Abort_IT+0xe4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d102      	bne.n	8000d38 <HAL_DMA_Abort_IT+0x84>
 8000d32:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d36:	e00e      	b.n	8000d56 <HAL_DMA_Abort_IT+0xa2>
 8000d38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d3c:	e00b      	b.n	8000d56 <HAL_DMA_Abort_IT+0xa2>
 8000d3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d42:	e008      	b.n	8000d56 <HAL_DMA_Abort_IT+0xa2>
 8000d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d48:	e005      	b.n	8000d56 <HAL_DMA_Abort_IT+0xa2>
 8000d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4e:	e002      	b.n	8000d56 <HAL_DMA_Abort_IT+0xa2>
 8000d50:	2310      	movs	r3, #16
 8000d52:	e000      	b.n	8000d56 <HAL_DMA_Abort_IT+0xa2>
 8000d54:	2301      	movs	r3, #1
 8000d56:	4a11      	ldr	r2, [pc, #68]	; (8000d9c <HAL_DMA_Abort_IT+0xe8>)
 8000d58:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	4798      	blx	r3
    } 
  }
  return status;
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40020008 	.word	0x40020008
 8000d88:	4002001c 	.word	0x4002001c
 8000d8c:	40020030 	.word	0x40020030
 8000d90:	40020044 	.word	0x40020044
 8000d94:	40020058 	.word	0x40020058
 8000d98:	4002006c 	.word	0x4002006c
 8000d9c:	40020000 	.word	0x40020000

08000da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b08b      	sub	sp, #44	; 0x2c
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000daa:	2300      	movs	r3, #0
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dae:	2300      	movs	r3, #0
 8000db0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db2:	e127      	b.n	8001004 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000db4:	2201      	movs	r2, #1
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	69fa      	ldr	r2, [r7, #28]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f040 8116 	bne.w	8000ffe <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b12      	cmp	r3, #18
 8000dd8:	d034      	beq.n	8000e44 <HAL_GPIO_Init+0xa4>
 8000dda:	2b12      	cmp	r3, #18
 8000ddc:	d80d      	bhi.n	8000dfa <HAL_GPIO_Init+0x5a>
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d02b      	beq.n	8000e3a <HAL_GPIO_Init+0x9a>
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d804      	bhi.n	8000df0 <HAL_GPIO_Init+0x50>
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d031      	beq.n	8000e4e <HAL_GPIO_Init+0xae>
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d01c      	beq.n	8000e28 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dee:	e048      	b.n	8000e82 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d043      	beq.n	8000e7c <HAL_GPIO_Init+0xdc>
 8000df4:	2b11      	cmp	r3, #17
 8000df6:	d01b      	beq.n	8000e30 <HAL_GPIO_Init+0x90>
          break;
 8000df8:	e043      	b.n	8000e82 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000dfa:	4a89      	ldr	r2, [pc, #548]	; (8001020 <HAL_GPIO_Init+0x280>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d026      	beq.n	8000e4e <HAL_GPIO_Init+0xae>
 8000e00:	4a87      	ldr	r2, [pc, #540]	; (8001020 <HAL_GPIO_Init+0x280>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d806      	bhi.n	8000e14 <HAL_GPIO_Init+0x74>
 8000e06:	4a87      	ldr	r2, [pc, #540]	; (8001024 <HAL_GPIO_Init+0x284>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d020      	beq.n	8000e4e <HAL_GPIO_Init+0xae>
 8000e0c:	4a86      	ldr	r2, [pc, #536]	; (8001028 <HAL_GPIO_Init+0x288>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d01d      	beq.n	8000e4e <HAL_GPIO_Init+0xae>
          break;
 8000e12:	e036      	b.n	8000e82 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e14:	4a85      	ldr	r2, [pc, #532]	; (800102c <HAL_GPIO_Init+0x28c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d019      	beq.n	8000e4e <HAL_GPIO_Init+0xae>
 8000e1a:	4a85      	ldr	r2, [pc, #532]	; (8001030 <HAL_GPIO_Init+0x290>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d016      	beq.n	8000e4e <HAL_GPIO_Init+0xae>
 8000e20:	4a84      	ldr	r2, [pc, #528]	; (8001034 <HAL_GPIO_Init+0x294>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d013      	beq.n	8000e4e <HAL_GPIO_Init+0xae>
          break;
 8000e26:	e02c      	b.n	8000e82 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	623b      	str	r3, [r7, #32]
          break;
 8000e2e:	e028      	b.n	8000e82 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	3304      	adds	r3, #4
 8000e36:	623b      	str	r3, [r7, #32]
          break;
 8000e38:	e023      	b.n	8000e82 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	3308      	adds	r3, #8
 8000e40:	623b      	str	r3, [r7, #32]
          break;
 8000e42:	e01e      	b.n	8000e82 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	330c      	adds	r3, #12
 8000e4a:	623b      	str	r3, [r7, #32]
          break;
 8000e4c:	e019      	b.n	8000e82 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d102      	bne.n	8000e5c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e56:	2304      	movs	r3, #4
 8000e58:	623b      	str	r3, [r7, #32]
          break;
 8000e5a:	e012      	b.n	8000e82 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d105      	bne.n	8000e70 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e64:	2308      	movs	r3, #8
 8000e66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	69fa      	ldr	r2, [r7, #28]
 8000e6c:	611a      	str	r2, [r3, #16]
          break;
 8000e6e:	e008      	b.n	8000e82 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e70:	2308      	movs	r3, #8
 8000e72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	69fa      	ldr	r2, [r7, #28]
 8000e78:	615a      	str	r2, [r3, #20]
          break;
 8000e7a:	e002      	b.n	8000e82 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
          break;
 8000e80:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	2bff      	cmp	r3, #255	; 0xff
 8000e86:	d801      	bhi.n	8000e8c <HAL_GPIO_Init+0xec>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	e001      	b.n	8000e90 <HAL_GPIO_Init+0xf0>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3304      	adds	r3, #4
 8000e90:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	2bff      	cmp	r3, #255	; 0xff
 8000e96:	d802      	bhi.n	8000e9e <HAL_GPIO_Init+0xfe>
 8000e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	e002      	b.n	8000ea4 <HAL_GPIO_Init+0x104>
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	3b08      	subs	r3, #8
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	210f      	movs	r1, #15
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	401a      	ands	r2, r3
 8000eb6:	6a39      	ldr	r1, [r7, #32]
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f000 8096 	beq.w	8000ffe <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ed2:	4b59      	ldr	r3, [pc, #356]	; (8001038 <HAL_GPIO_Init+0x298>)
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	4a58      	ldr	r2, [pc, #352]	; (8001038 <HAL_GPIO_Init+0x298>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6193      	str	r3, [r2, #24]
 8000ede:	4b56      	ldr	r3, [pc, #344]	; (8001038 <HAL_GPIO_Init+0x298>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000eea:	4a54      	ldr	r2, [pc, #336]	; (800103c <HAL_GPIO_Init+0x29c>)
 8000eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	220f      	movs	r2, #15
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4b      	ldr	r2, [pc, #300]	; (8001040 <HAL_GPIO_Init+0x2a0>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d013      	beq.n	8000f3e <HAL_GPIO_Init+0x19e>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4a      	ldr	r2, [pc, #296]	; (8001044 <HAL_GPIO_Init+0x2a4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d00d      	beq.n	8000f3a <HAL_GPIO_Init+0x19a>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a49      	ldr	r2, [pc, #292]	; (8001048 <HAL_GPIO_Init+0x2a8>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d007      	beq.n	8000f36 <HAL_GPIO_Init+0x196>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a48      	ldr	r2, [pc, #288]	; (800104c <HAL_GPIO_Init+0x2ac>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d101      	bne.n	8000f32 <HAL_GPIO_Init+0x192>
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x1a0>
 8000f32:	2304      	movs	r3, #4
 8000f34:	e004      	b.n	8000f40 <HAL_GPIO_Init+0x1a0>
 8000f36:	2302      	movs	r3, #2
 8000f38:	e002      	b.n	8000f40 <HAL_GPIO_Init+0x1a0>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <HAL_GPIO_Init+0x1a0>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f42:	f002 0203 	and.w	r2, r2, #3
 8000f46:	0092      	lsls	r2, r2, #2
 8000f48:	4093      	lsls	r3, r2
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f50:	493a      	ldr	r1, [pc, #232]	; (800103c <HAL_GPIO_Init+0x29c>)
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	3302      	adds	r3, #2
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d006      	beq.n	8000f78 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f6a:	4b39      	ldr	r3, [pc, #228]	; (8001050 <HAL_GPIO_Init+0x2b0>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4938      	ldr	r1, [pc, #224]	; (8001050 <HAL_GPIO_Init+0x2b0>)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	600b      	str	r3, [r1, #0]
 8000f76:	e006      	b.n	8000f86 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f78:	4b35      	ldr	r3, [pc, #212]	; (8001050 <HAL_GPIO_Init+0x2b0>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	4933      	ldr	r1, [pc, #204]	; (8001050 <HAL_GPIO_Init+0x2b0>)
 8000f82:	4013      	ands	r3, r2
 8000f84:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d006      	beq.n	8000fa0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f92:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <HAL_GPIO_Init+0x2b0>)
 8000f94:	685a      	ldr	r2, [r3, #4]
 8000f96:	492e      	ldr	r1, [pc, #184]	; (8001050 <HAL_GPIO_Init+0x2b0>)
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	604b      	str	r3, [r1, #4]
 8000f9e:	e006      	b.n	8000fae <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fa0:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <HAL_GPIO_Init+0x2b0>)
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	4929      	ldr	r1, [pc, #164]	; (8001050 <HAL_GPIO_Init+0x2b0>)
 8000faa:	4013      	ands	r3, r2
 8000fac:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d006      	beq.n	8000fc8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fba:	4b25      	ldr	r3, [pc, #148]	; (8001050 <HAL_GPIO_Init+0x2b0>)
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	4924      	ldr	r1, [pc, #144]	; (8001050 <HAL_GPIO_Init+0x2b0>)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	608b      	str	r3, [r1, #8]
 8000fc6:	e006      	b.n	8000fd6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fc8:	4b21      	ldr	r3, [pc, #132]	; (8001050 <HAL_GPIO_Init+0x2b0>)
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	491f      	ldr	r1, [pc, #124]	; (8001050 <HAL_GPIO_Init+0x2b0>)
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d006      	beq.n	8000ff0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fe2:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <HAL_GPIO_Init+0x2b0>)
 8000fe4:	68da      	ldr	r2, [r3, #12]
 8000fe6:	491a      	ldr	r1, [pc, #104]	; (8001050 <HAL_GPIO_Init+0x2b0>)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	60cb      	str	r3, [r1, #12]
 8000fee:	e006      	b.n	8000ffe <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_GPIO_Init+0x2b0>)
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	4915      	ldr	r1, [pc, #84]	; (8001050 <HAL_GPIO_Init+0x2b0>)
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	3301      	adds	r3, #1
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100a:	fa22 f303 	lsr.w	r3, r2, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	f47f aed0 	bne.w	8000db4 <HAL_GPIO_Init+0x14>
  }
}
 8001014:	bf00      	nop
 8001016:	372c      	adds	r7, #44	; 0x2c
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	10210000 	.word	0x10210000
 8001024:	10110000 	.word	0x10110000
 8001028:	10120000 	.word	0x10120000
 800102c:	10310000 	.word	0x10310000
 8001030:	10320000 	.word	0x10320000
 8001034:	10220000 	.word	0x10220000
 8001038:	40021000 	.word	0x40021000
 800103c:	40010000 	.word	0x40010000
 8001040:	40010800 	.word	0x40010800
 8001044:	40010c00 	.word	0x40010c00
 8001048:	40011000 	.word	0x40011000
 800104c:	40011400 	.word	0x40011400
 8001050:	40010400 	.word	0x40010400

08001054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	807b      	strh	r3, [r7, #2]
 8001060:	4613      	mov	r3, r2
 8001062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001064:	787b      	ldrb	r3, [r7, #1]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800106a:	887a      	ldrh	r2, [r7, #2]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001070:	e003      	b.n	800107a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001072:	887b      	ldrh	r3, [r7, #2]
 8001074:	041a      	lsls	r2, r3, #16
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	611a      	str	r2, [r3, #16]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e26c      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 8087 	beq.w	80011b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010a4:	4b92      	ldr	r3, [pc, #584]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 030c 	and.w	r3, r3, #12
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d00c      	beq.n	80010ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010b0:	4b8f      	ldr	r3, [pc, #572]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 030c 	and.w	r3, r3, #12
 80010b8:	2b08      	cmp	r3, #8
 80010ba:	d112      	bne.n	80010e2 <HAL_RCC_OscConfig+0x5e>
 80010bc:	4b8c      	ldr	r3, [pc, #560]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c8:	d10b      	bne.n	80010e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ca:	4b89      	ldr	r3, [pc, #548]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d06c      	beq.n	80011b0 <HAL_RCC_OscConfig+0x12c>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d168      	bne.n	80011b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e246      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ea:	d106      	bne.n	80010fa <HAL_RCC_OscConfig+0x76>
 80010ec:	4b80      	ldr	r3, [pc, #512]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a7f      	ldr	r2, [pc, #508]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	e02e      	b.n	8001158 <HAL_RCC_OscConfig+0xd4>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10c      	bne.n	800111c <HAL_RCC_OscConfig+0x98>
 8001102:	4b7b      	ldr	r3, [pc, #492]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a7a      	ldr	r2, [pc, #488]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	4b78      	ldr	r3, [pc, #480]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a77      	ldr	r2, [pc, #476]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001114:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e01d      	b.n	8001158 <HAL_RCC_OscConfig+0xd4>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001124:	d10c      	bne.n	8001140 <HAL_RCC_OscConfig+0xbc>
 8001126:	4b72      	ldr	r3, [pc, #456]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a71      	ldr	r2, [pc, #452]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800112c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	4b6f      	ldr	r3, [pc, #444]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a6e      	ldr	r2, [pc, #440]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e00b      	b.n	8001158 <HAL_RCC_OscConfig+0xd4>
 8001140:	4b6b      	ldr	r3, [pc, #428]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a6a      	ldr	r2, [pc, #424]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b68      	ldr	r3, [pc, #416]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a67      	ldr	r2, [pc, #412]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001156:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d013      	beq.n	8001188 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001160:	f7ff fc6e 	bl	8000a40 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001168:	f7ff fc6a 	bl	8000a40 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b64      	cmp	r3, #100	; 0x64
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e1fa      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117a:	4b5d      	ldr	r3, [pc, #372]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f0      	beq.n	8001168 <HAL_RCC_OscConfig+0xe4>
 8001186:	e014      	b.n	80011b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fc5a 	bl	8000a40 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001190:	f7ff fc56 	bl	8000a40 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b64      	cmp	r3, #100	; 0x64
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e1e6      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a2:	4b53      	ldr	r3, [pc, #332]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f0      	bne.n	8001190 <HAL_RCC_OscConfig+0x10c>
 80011ae:	e000      	b.n	80011b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d063      	beq.n	8001286 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011be:	4b4c      	ldr	r3, [pc, #304]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00b      	beq.n	80011e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011ca:	4b49      	ldr	r3, [pc, #292]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	2b08      	cmp	r3, #8
 80011d4:	d11c      	bne.n	8001210 <HAL_RCC_OscConfig+0x18c>
 80011d6:	4b46      	ldr	r3, [pc, #280]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d116      	bne.n	8001210 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e2:	4b43      	ldr	r3, [pc, #268]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d005      	beq.n	80011fa <HAL_RCC_OscConfig+0x176>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d001      	beq.n	80011fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e1ba      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fa:	4b3d      	ldr	r3, [pc, #244]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	4939      	ldr	r1, [pc, #228]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800120a:	4313      	orrs	r3, r2
 800120c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120e:	e03a      	b.n	8001286 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d020      	beq.n	800125a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001218:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121e:	f7ff fc0f 	bl	8000a40 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001226:	f7ff fc0b 	bl	8000a40 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e19b      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001238:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f0      	beq.n	8001226 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001244:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	4927      	ldr	r1, [pc, #156]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001254:	4313      	orrs	r3, r2
 8001256:	600b      	str	r3, [r1, #0]
 8001258:	e015      	b.n	8001286 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fbee 	bl	8000a40 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001268:	f7ff fbea 	bl	8000a40 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e17a      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	d03a      	beq.n	8001308 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d019      	beq.n	80012ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_RCC_OscConfig+0x274>)
 800129c:	2201      	movs	r2, #1
 800129e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a0:	f7ff fbce 	bl	8000a40 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a8:	f7ff fbca 	bl	8000a40 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e15a      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f0      	beq.n	80012a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012c6:	2001      	movs	r0, #1
 80012c8:	f000 fada 	bl	8001880 <RCC_Delay>
 80012cc:	e01c      	b.n	8001308 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_RCC_OscConfig+0x274>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d4:	f7ff fbb4 	bl	8000a40 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012da:	e00f      	b.n	80012fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012dc:	f7ff fbb0 	bl	8000a40 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d908      	bls.n	80012fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e140      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000
 80012f4:	42420000 	.word	0x42420000
 80012f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fc:	4b9e      	ldr	r3, [pc, #632]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80012fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1e9      	bne.n	80012dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80a6 	beq.w	8001462 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800131a:	4b97      	ldr	r3, [pc, #604]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10d      	bne.n	8001342 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b94      	ldr	r3, [pc, #592]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4a93      	ldr	r2, [pc, #588]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	61d3      	str	r3, [r2, #28]
 8001332:	4b91      	ldr	r3, [pc, #580]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800133e:	2301      	movs	r3, #1
 8001340:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001342:	4b8e      	ldr	r3, [pc, #568]	; (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134a:	2b00      	cmp	r3, #0
 800134c:	d118      	bne.n	8001380 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800134e:	4b8b      	ldr	r3, [pc, #556]	; (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a8a      	ldr	r2, [pc, #552]	; (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800135a:	f7ff fb71 	bl	8000a40 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001362:	f7ff fb6d 	bl	8000a40 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b64      	cmp	r3, #100	; 0x64
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e0fd      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001374:	4b81      	ldr	r3, [pc, #516]	; (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d106      	bne.n	8001396 <HAL_RCC_OscConfig+0x312>
 8001388:	4b7b      	ldr	r3, [pc, #492]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	4a7a      	ldr	r2, [pc, #488]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6213      	str	r3, [r2, #32]
 8001394:	e02d      	b.n	80013f2 <HAL_RCC_OscConfig+0x36e>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x334>
 800139e:	4b76      	ldr	r3, [pc, #472]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4a75      	ldr	r2, [pc, #468]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	6213      	str	r3, [r2, #32]
 80013aa:	4b73      	ldr	r3, [pc, #460]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4a72      	ldr	r2, [pc, #456]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013b0:	f023 0304 	bic.w	r3, r3, #4
 80013b4:	6213      	str	r3, [r2, #32]
 80013b6:	e01c      	b.n	80013f2 <HAL_RCC_OscConfig+0x36e>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b05      	cmp	r3, #5
 80013be:	d10c      	bne.n	80013da <HAL_RCC_OscConfig+0x356>
 80013c0:	4b6d      	ldr	r3, [pc, #436]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4a6c      	ldr	r2, [pc, #432]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	6213      	str	r3, [r2, #32]
 80013cc:	4b6a      	ldr	r3, [pc, #424]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	4a69      	ldr	r2, [pc, #420]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6213      	str	r3, [r2, #32]
 80013d8:	e00b      	b.n	80013f2 <HAL_RCC_OscConfig+0x36e>
 80013da:	4b67      	ldr	r3, [pc, #412]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	4a66      	ldr	r2, [pc, #408]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013e0:	f023 0301 	bic.w	r3, r3, #1
 80013e4:	6213      	str	r3, [r2, #32]
 80013e6:	4b64      	ldr	r3, [pc, #400]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	4a63      	ldr	r2, [pc, #396]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013ec:	f023 0304 	bic.w	r3, r3, #4
 80013f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d015      	beq.n	8001426 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fb21 	bl	8000a40 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001400:	e00a      	b.n	8001418 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001402:	f7ff fb1d 	bl	8000a40 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001410:	4293      	cmp	r3, r2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e0ab      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001418:	4b57      	ldr	r3, [pc, #348]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0ee      	beq.n	8001402 <HAL_RCC_OscConfig+0x37e>
 8001424:	e014      	b.n	8001450 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff fb0b 	bl	8000a40 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800142c:	e00a      	b.n	8001444 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800142e:	f7ff fb07 	bl	8000a40 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f241 3288 	movw	r2, #5000	; 0x1388
 800143c:	4293      	cmp	r3, r2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e095      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001444:	4b4c      	ldr	r3, [pc, #304]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1ee      	bne.n	800142e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d105      	bne.n	8001462 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001456:	4b48      	ldr	r3, [pc, #288]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4a47      	ldr	r2, [pc, #284]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800145c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001460:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 8081 	beq.w	800156e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800146c:	4b42      	ldr	r3, [pc, #264]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 030c 	and.w	r3, r3, #12
 8001474:	2b08      	cmp	r3, #8
 8001476:	d061      	beq.n	800153c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d146      	bne.n	800150e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001480:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <HAL_RCC_OscConfig+0x4fc>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001486:	f7ff fadb 	bl	8000a40 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800148e:	f7ff fad7 	bl	8000a40 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e067      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a0:	4b35      	ldr	r3, [pc, #212]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f0      	bne.n	800148e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b4:	d108      	bne.n	80014c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	492d      	ldr	r1, [pc, #180]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014c8:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a19      	ldr	r1, [r3, #32]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	430b      	orrs	r3, r1
 80014da:	4927      	ldr	r1, [pc, #156]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <HAL_RCC_OscConfig+0x4fc>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7ff faab 	bl	8000a40 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ee:	f7ff faa7 	bl	8000a40 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e037      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001500:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x46a>
 800150c:	e02f      	b.n	800156e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150e:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <HAL_RCC_OscConfig+0x4fc>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fa94 	bl	8000a40 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151c:	f7ff fa90 	bl	8000a40 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e020      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x498>
 800153a:	e018      	b.n	800156e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e013      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	429a      	cmp	r2, r3
 800155a:	d106      	bne.n	800156a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001566:	429a      	cmp	r2, r3
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021000 	.word	0x40021000
 800157c:	40007000 	.word	0x40007000
 8001580:	42420060 	.word	0x42420060

08001584 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0d0      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001598:	4b6a      	ldr	r3, [pc, #424]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d910      	bls.n	80015c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	4b67      	ldr	r3, [pc, #412]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 0207 	bic.w	r2, r3, #7
 80015ae:	4965      	ldr	r1, [pc, #404]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b6:	4b63      	ldr	r3, [pc, #396]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0b8      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d020      	beq.n	8001616 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e0:	4b59      	ldr	r3, [pc, #356]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	4a58      	ldr	r2, [pc, #352]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f8:	4b53      	ldr	r3, [pc, #332]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4a52      	ldr	r2, [pc, #328]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001602:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001604:	4b50      	ldr	r3, [pc, #320]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	494d      	ldr	r1, [pc, #308]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	4313      	orrs	r3, r2
 8001614:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d040      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d107      	bne.n	800163a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162a:	4b47      	ldr	r3, [pc, #284]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d115      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e07f      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d107      	bne.n	8001652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001642:	4b41      	ldr	r3, [pc, #260]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d109      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e073      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001652:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e06b      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001662:	4b39      	ldr	r3, [pc, #228]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f023 0203 	bic.w	r2, r3, #3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	4936      	ldr	r1, [pc, #216]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001674:	f7ff f9e4 	bl	8000a40 <HAL_GetTick>
 8001678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167a:	e00a      	b.n	8001692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800167c:	f7ff f9e0 	bl	8000a40 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	; 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e053      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001692:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 020c 	and.w	r2, r3, #12
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d1eb      	bne.n	800167c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d210      	bcs.n	80016d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	4b24      	ldr	r3, [pc, #144]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 0207 	bic.w	r2, r3, #7
 80016ba:	4922      	ldr	r1, [pc, #136]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e032      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	4916      	ldr	r1, [pc, #88]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d009      	beq.n	8001712 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	490e      	ldr	r1, [pc, #56]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	4313      	orrs	r3, r2
 8001710:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001712:	f000 f821 	bl	8001758 <HAL_RCC_GetSysClockFreq>
 8001716:	4601      	mov	r1, r0
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 8001724:	5cd3      	ldrb	r3, [r2, r3]
 8001726:	fa21 f303 	lsr.w	r3, r1, r3
 800172a:	4a09      	ldr	r2, [pc, #36]	; (8001750 <HAL_RCC_ClockConfig+0x1cc>)
 800172c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_RCC_ClockConfig+0x1d0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff f942 	bl	80009bc <HAL_InitTick>

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40022000 	.word	0x40022000
 8001748:	40021000 	.word	0x40021000
 800174c:	08003460 	.word	0x08003460
 8001750:	20000000 	.word	0x20000000
 8001754:	20000004 	.word	0x20000004

08001758 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001758:	b490      	push	{r4, r7}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800175e:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001760:	1d3c      	adds	r4, r7, #4
 8001762:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001764:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <HAL_RCC_GetSysClockFreq+0xb4>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001782:	4b23      	ldr	r3, [pc, #140]	; (8001810 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b04      	cmp	r3, #4
 8001790:	d002      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0x40>
 8001792:	2b08      	cmp	r3, #8
 8001794:	d003      	beq.n	800179e <HAL_RCC_GetSysClockFreq+0x46>
 8001796:	e02d      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001798:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <HAL_RCC_GetSysClockFreq+0xbc>)
 800179a:	623b      	str	r3, [r7, #32]
      break;
 800179c:	e02d      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	0c9b      	lsrs	r3, r3, #18
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017aa:	4413      	add	r3, r2
 80017ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	0c5b      	lsrs	r3, r3, #17
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017ca:	4413      	add	r3, r2
 80017cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	4a0f      	ldr	r2, [pc, #60]	; (8001814 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017d6:	fb02 f203 	mul.w	r2, r2, r3
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
 80017e2:	e004      	b.n	80017ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	4a0c      	ldr	r2, [pc, #48]	; (8001818 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017e8:	fb02 f303 	mul.w	r3, r2, r3
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	623b      	str	r3, [r7, #32]
      break;
 80017f2:	e002      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017f6:	623b      	str	r3, [r7, #32]
      break;
 80017f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017fa:	6a3b      	ldr	r3, [r7, #32]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bc90      	pop	{r4, r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	0800344c 	.word	0x0800344c
 800180c:	0800345c 	.word	0x0800345c
 8001810:	40021000 	.word	0x40021000
 8001814:	007a1200 	.word	0x007a1200
 8001818:	003d0900 	.word	0x003d0900

0800181c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001820:	4b02      	ldr	r3, [pc, #8]	; (800182c <HAL_RCC_GetHCLKFreq+0x10>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	20000000 	.word	0x20000000

08001830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001834:	f7ff fff2 	bl	800181c <HAL_RCC_GetHCLKFreq>
 8001838:	4601      	mov	r1, r0
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	0a1b      	lsrs	r3, r3, #8
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	4a03      	ldr	r2, [pc, #12]	; (8001854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001846:	5cd3      	ldrb	r3, [r2, r3]
 8001848:	fa21 f303 	lsr.w	r3, r1, r3
}
 800184c:	4618      	mov	r0, r3
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000
 8001854:	08003470 	.word	0x08003470

08001858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800185c:	f7ff ffde 	bl	800181c <HAL_RCC_GetHCLKFreq>
 8001860:	4601      	mov	r1, r0
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	0adb      	lsrs	r3, r3, #11
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	4a03      	ldr	r2, [pc, #12]	; (800187c <HAL_RCC_GetPCLK2Freq+0x24>)
 800186e:	5cd3      	ldrb	r3, [r2, r3]
 8001870:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001874:	4618      	mov	r0, r3
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40021000 	.word	0x40021000
 800187c:	08003470 	.word	0x08003470

08001880 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001888:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <RCC_Delay+0x34>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <RCC_Delay+0x38>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	0a5b      	lsrs	r3, r3, #9
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	fb02 f303 	mul.w	r3, r2, r3
 800189a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800189c:	bf00      	nop
  }
  while (Delay --);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1e5a      	subs	r2, r3, #1
 80018a2:	60fa      	str	r2, [r7, #12]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f9      	bne.n	800189c <RCC_Delay+0x1c>
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000000 	.word	0x20000000
 80018b8:	10624dd3 	.word	0x10624dd3

080018bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e01d      	b.n	800190a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d106      	bne.n	80018e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7fe fefa 	bl	80006dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3304      	adds	r3, #4
 80018f8:	4619      	mov	r1, r3
 80018fa:	4610      	mov	r0, r2
 80018fc:	f000 f8d0 	bl	8001aa0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800192a:	2302      	movs	r3, #2
 800192c:	e0b4      	b.n	8001a98 <HAL_TIM_PWM_ConfigChannel+0x184>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2202      	movs	r2, #2
 800193a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b0c      	cmp	r3, #12
 8001942:	f200 809f 	bhi.w	8001a84 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001946:	a201      	add	r2, pc, #4	; (adr r2, 800194c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194c:	08001981 	.word	0x08001981
 8001950:	08001a85 	.word	0x08001a85
 8001954:	08001a85 	.word	0x08001a85
 8001958:	08001a85 	.word	0x08001a85
 800195c:	080019c1 	.word	0x080019c1
 8001960:	08001a85 	.word	0x08001a85
 8001964:	08001a85 	.word	0x08001a85
 8001968:	08001a85 	.word	0x08001a85
 800196c:	08001a03 	.word	0x08001a03
 8001970:	08001a85 	.word	0x08001a85
 8001974:	08001a85 	.word	0x08001a85
 8001978:	08001a85 	.word	0x08001a85
 800197c:	08001a43 	.word	0x08001a43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	4618      	mov	r0, r3
 8001988:	f000 f8ec 	bl	8001b64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	699a      	ldr	r2, [r3, #24]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0208 	orr.w	r2, r2, #8
 800199a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	699a      	ldr	r2, [r3, #24]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0204 	bic.w	r2, r2, #4
 80019aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6999      	ldr	r1, [r3, #24]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	691a      	ldr	r2, [r3, #16]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	619a      	str	r2, [r3, #24]
      break;
 80019be:	e062      	b.n	8001a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f932 	bl	8001c30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699a      	ldr	r2, [r3, #24]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	699a      	ldr	r2, [r3, #24]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6999      	ldr	r1, [r3, #24]
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	021a      	lsls	r2, r3, #8
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	619a      	str	r2, [r3, #24]
      break;
 8001a00:	e041      	b.n	8001a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68b9      	ldr	r1, [r7, #8]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 f97b 	bl	8001d04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	69da      	ldr	r2, [r3, #28]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 0208 	orr.w	r2, r2, #8
 8001a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	69da      	ldr	r2, [r3, #28]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0204 	bic.w	r2, r2, #4
 8001a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	69d9      	ldr	r1, [r3, #28]
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	61da      	str	r2, [r3, #28]
      break;
 8001a40:	e021      	b.n	8001a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68b9      	ldr	r1, [r7, #8]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 f9c5 	bl	8001dd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	69da      	ldr	r2, [r3, #28]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	69da      	ldr	r2, [r3, #28]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	69d9      	ldr	r1, [r3, #28]
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	021a      	lsls	r2, r3, #8
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	61da      	str	r2, [r3, #28]
      break;
 8001a82:	e000      	b.n	8001a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001a84:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a29      	ldr	r2, [pc, #164]	; (8001b58 <TIM_Base_SetConfig+0xb8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d00b      	beq.n	8001ad0 <TIM_Base_SetConfig+0x30>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001abe:	d007      	beq.n	8001ad0 <TIM_Base_SetConfig+0x30>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a26      	ldr	r2, [pc, #152]	; (8001b5c <TIM_Base_SetConfig+0xbc>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d003      	beq.n	8001ad0 <TIM_Base_SetConfig+0x30>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a25      	ldr	r2, [pc, #148]	; (8001b60 <TIM_Base_SetConfig+0xc0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d108      	bne.n	8001ae2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <TIM_Base_SetConfig+0xb8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00b      	beq.n	8001b02 <TIM_Base_SetConfig+0x62>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af0:	d007      	beq.n	8001b02 <TIM_Base_SetConfig+0x62>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a19      	ldr	r2, [pc, #100]	; (8001b5c <TIM_Base_SetConfig+0xbc>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d003      	beq.n	8001b02 <TIM_Base_SetConfig+0x62>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a18      	ldr	r2, [pc, #96]	; (8001b60 <TIM_Base_SetConfig+0xc0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d108      	bne.n	8001b14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <TIM_Base_SetConfig+0xb8>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d103      	bne.n	8001b48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	691a      	ldr	r2, [r3, #16]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	615a      	str	r2, [r3, #20]
}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	40012c00 	.word	0x40012c00
 8001b5c:	40000400 	.word	0x40000400
 8001b60:	40000800 	.word	0x40000800

08001b64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	f023 0201 	bic.w	r2, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f023 0303 	bic.w	r3, r3, #3
 8001b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f023 0302 	bic.w	r3, r3, #2
 8001bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a1c      	ldr	r2, [pc, #112]	; (8001c2c <TIM_OC1_SetConfig+0xc8>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d10c      	bne.n	8001bda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f023 0308 	bic.w	r3, r3, #8
 8001bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f023 0304 	bic.w	r3, r3, #4
 8001bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a13      	ldr	r2, [pc, #76]	; (8001c2c <TIM_OC1_SetConfig+0xc8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d111      	bne.n	8001c06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	621a      	str	r2, [r3, #32]
}
 8001c20:	bf00      	nop
 8001c22:	371c      	adds	r7, #28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40012c00 	.word	0x40012c00

08001c30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b087      	sub	sp, #28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	f023 0210 	bic.w	r2, r3, #16
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f023 0320 	bic.w	r3, r3, #32
 8001c7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	011b      	lsls	r3, r3, #4
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a1d      	ldr	r2, [pc, #116]	; (8001d00 <TIM_OC2_SetConfig+0xd0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d10d      	bne.n	8001cac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001caa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a14      	ldr	r2, [pc, #80]	; (8001d00 <TIM_OC2_SetConfig+0xd0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d113      	bne.n	8001cdc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	621a      	str	r2, [r3, #32]
}
 8001cf6:	bf00      	nop
 8001cf8:	371c      	adds	r7, #28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	40012c00 	.word	0x40012c00

08001d04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f023 0303 	bic.w	r3, r3, #3
 8001d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	021b      	lsls	r3, r3, #8
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a1d      	ldr	r2, [pc, #116]	; (8001dd4 <TIM_OC3_SetConfig+0xd0>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d10d      	bne.n	8001d7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <TIM_OC3_SetConfig+0xd0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d113      	bne.n	8001dae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	621a      	str	r2, [r3, #32]
}
 8001dc8:	bf00      	nop
 8001dca:	371c      	adds	r7, #28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40012c00 	.word	0x40012c00

08001dd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	031b      	lsls	r3, r3, #12
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a0f      	ldr	r2, [pc, #60]	; (8001e70 <TIM_OC4_SetConfig+0x98>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d109      	bne.n	8001e4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	019b      	lsls	r3, r3, #6
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	621a      	str	r2, [r3, #32]
}
 8001e66:	bf00      	nop
 8001e68:	371c      	adds	r7, #28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	40012c00 	.word	0x40012c00

08001e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e032      	b.n	8001ef2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ec4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e03f      	b.n	8001f8e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d106      	bne.n	8001f28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe fc26 	bl	8000774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2224      	movs	r2, #36	; 0x24
 8001f2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 fc33 	bl	80027ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695a      	ldr	r2, [r3, #20]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b088      	sub	sp, #32
 8001f9a:	af02      	add	r7, sp, #8
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	603b      	str	r3, [r7, #0]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b20      	cmp	r3, #32
 8001fb4:	f040 8083 	bne.w	80020be <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <HAL_UART_Transmit+0x2e>
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e07b      	b.n	80020c0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_UART_Transmit+0x40>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e074      	b.n	80020c0 <HAL_UART_Transmit+0x12a>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2221      	movs	r2, #33	; 0x21
 8001fe8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001fec:	f7fe fd28 	bl	8000a40 <HAL_GetTick>
 8001ff0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	88fa      	ldrh	r2, [r7, #6]
 8001ff6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	88fa      	ldrh	r2, [r7, #6]
 8001ffc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ffe:	e042      	b.n	8002086 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002004:	b29b      	uxth	r3, r3
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002016:	d122      	bne.n	800205e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2200      	movs	r2, #0
 8002020:	2180      	movs	r1, #128	; 0x80
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 fa58 	bl	80024d8 <UART_WaitOnFlagUntilTimeout>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e046      	b.n	80020c0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002044:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d103      	bne.n	8002056 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	3302      	adds	r3, #2
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	e017      	b.n	8002086 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	3301      	adds	r3, #1
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	e013      	b.n	8002086 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2200      	movs	r2, #0
 8002066:	2180      	movs	r1, #128	; 0x80
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 fa35 	bl	80024d8 <UART_WaitOnFlagUntilTimeout>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e023      	b.n	80020c0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	60ba      	str	r2, [r7, #8]
 800207e:	781a      	ldrb	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800208a:	b29b      	uxth	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1b7      	bne.n	8002000 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2200      	movs	r2, #0
 8002098:	2140      	movs	r1, #64	; 0x40
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 fa1c 	bl	80024d8 <UART_WaitOnFlagUntilTimeout>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e00a      	b.n	80020c0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2220      	movs	r2, #32
 80020ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e000      	b.n	80020c0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80020be:	2302      	movs	r3, #2
  }
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	4613      	mov	r3, r2
 80020d6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b20      	cmp	r3, #32
 80020e6:	f040 8090 	bne.w	800220a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d002      	beq.n	80020f6 <HAL_UART_Receive+0x2e>
 80020f0:	88fb      	ldrh	r3, [r7, #6]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e088      	b.n	800220c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <HAL_UART_Receive+0x40>
 8002104:	2302      	movs	r3, #2
 8002106:	e081      	b.n	800220c <HAL_UART_Receive+0x144>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2222      	movs	r2, #34	; 0x22
 800211a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800211e:	f7fe fc8f 	bl	8000a40 <HAL_GetTick>
 8002122:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	88fa      	ldrh	r2, [r7, #6]
 8002128:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	88fa      	ldrh	r2, [r7, #6]
 800212e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002130:	e05c      	b.n	80021ec <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002136:	b29b      	uxth	r3, r3
 8002138:	3b01      	subs	r3, #1
 800213a:	b29a      	uxth	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002148:	d12b      	bne.n	80021a2 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2200      	movs	r2, #0
 8002152:	2120      	movs	r1, #32
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 f9bf 	bl	80024d8 <UART_WaitOnFlagUntilTimeout>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e053      	b.n	800220c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10c      	bne.n	800218a <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	b29b      	uxth	r3, r3
 8002178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800217c:	b29a      	uxth	r2, r3
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	3302      	adds	r3, #2
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	e030      	b.n	80021ec <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	b29b      	uxth	r3, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	b29a      	uxth	r2, r3
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	3301      	adds	r3, #1
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	e024      	b.n	80021ec <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2200      	movs	r2, #0
 80021aa:	2120      	movs	r1, #32
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f993 	bl	80024d8 <UART_WaitOnFlagUntilTimeout>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e027      	b.n	800220c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d108      	bne.n	80021d6 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6859      	ldr	r1, [r3, #4]
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	60ba      	str	r2, [r7, #8]
 80021d0:	b2ca      	uxtb	r2, r1
 80021d2:	701a      	strb	r2, [r3, #0]
 80021d4:	e00a      	b.n	80021ec <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	1c59      	adds	r1, r3, #1
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d19d      	bne.n	8002132 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	e000      	b.n	800220c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800220a:	2302      	movs	r3, #2
  }
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	4613      	mov	r3, r2
 8002220:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b20      	cmp	r3, #32
 800222c:	d140      	bne.n	80022b0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <HAL_UART_Receive_IT+0x26>
 8002234:	88fb      	ldrh	r3, [r7, #6]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e039      	b.n	80022b2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_UART_Receive_IT+0x38>
 8002248:	2302      	movs	r3, #2
 800224a:	e032      	b.n	80022b2 <HAL_UART_Receive_IT+0x9e>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	88fa      	ldrh	r2, [r7, #6]
 800225e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	88fa      	ldrh	r2, [r7, #6]
 8002264:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2222      	movs	r2, #34	; 0x22
 8002270:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800228a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0220 	orr.w	r2, r2, #32
 80022aa:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	e000      	b.n	80022b2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80022b0:	2302      	movs	r3, #2
  }
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10d      	bne.n	800230e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_UART_IRQHandler+0x52>
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f9ce 	bl	80026a8 <UART_Receive_IT>
      return;
 800230c:	e0cc      	b.n	80024a8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80ab 	beq.w	800246c <HAL_UART_IRQHandler+0x1b0>
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d105      	bne.n	800232c <HAL_UART_IRQHandler+0x70>
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 80a0 	beq.w	800246c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_UART_IRQHandler+0x90>
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002344:	f043 0201 	orr.w	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_UART_IRQHandler+0xb0>
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002364:	f043 0202 	orr.w	r2, r3, #2
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_UART_IRQHandler+0xd0>
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002384:	f043 0204 	orr.w	r2, r3, #4
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <HAL_UART_IRQHandler+0xf0>
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a4:	f043 0208 	orr.w	r2, r3, #8
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d078      	beq.n	80024a6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <HAL_UART_IRQHandler+0x112>
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f96d 	bl	80026a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf14      	ite	ne
 80023dc:	2301      	movne	r3, #1
 80023de:	2300      	moveq	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d102      	bne.n	80023f6 <HAL_UART_IRQHandler+0x13a>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d031      	beq.n	800245a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f8b8 	bl	800256c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002406:	2b00      	cmp	r3, #0
 8002408:	d023      	beq.n	8002452 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695a      	ldr	r2, [r3, #20]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002418:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241e:	2b00      	cmp	r3, #0
 8002420:	d013      	beq.n	800244a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002426:	4a22      	ldr	r2, [pc, #136]	; (80024b0 <HAL_UART_IRQHandler+0x1f4>)
 8002428:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe fc40 	bl	8000cb4 <HAL_DMA_Abort_IT>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d016      	beq.n	8002468 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002444:	4610      	mov	r0, r2
 8002446:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002448:	e00e      	b.n	8002468 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f83b 	bl	80024c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002450:	e00a      	b.n	8002468 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f837 	bl	80024c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002458:	e006      	b.n	8002468 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f833 	bl	80024c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002466:	e01e      	b.n	80024a6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002468:	bf00      	nop
    return;
 800246a:	e01c      	b.n	80024a6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002472:	2b00      	cmp	r3, #0
 8002474:	d008      	beq.n	8002488 <HAL_UART_IRQHandler+0x1cc>
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f8a4 	bl	80025ce <UART_Transmit_IT>
    return;
 8002486:	e00f      	b.n	80024a8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_UART_IRQHandler+0x1ec>
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f8eb 	bl	8002678 <UART_EndTransmit_IT>
    return;
 80024a2:	bf00      	nop
 80024a4:	e000      	b.n	80024a8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80024a6:	bf00      	nop
  }
}
 80024a8:	3720      	adds	r7, #32
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	080025a7 	.word	0x080025a7

080024b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr

080024c6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	603b      	str	r3, [r7, #0]
 80024e4:	4613      	mov	r3, r2
 80024e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024e8:	e02c      	b.n	8002544 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f0:	d028      	beq.n	8002544 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <UART_WaitOnFlagUntilTimeout+0x30>
 80024f8:	f7fe faa2 	bl	8000a40 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	429a      	cmp	r2, r3
 8002506:	d21d      	bcs.n	8002544 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002516:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695a      	ldr	r2, [r3, #20]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0201 	bic.w	r2, r2, #1
 8002526:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2220      	movs	r2, #32
 8002534:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e00f      	b.n	8002564 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	4013      	ands	r3, r2
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	429a      	cmp	r2, r3
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	429a      	cmp	r2, r3
 8002560:	d0c3      	beq.n	80024ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002582:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0201 	bic.w	r2, r2, #1
 8002592:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b084      	sub	sp, #16
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f7ff ff80 	bl	80024c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b085      	sub	sp, #20
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b21      	cmp	r3, #33	; 0x21
 80025e0:	d144      	bne.n	800266c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ea:	d11a      	bne.n	8002622 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002600:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d105      	bne.n	8002616 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	1c9a      	adds	r2, r3, #2
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	621a      	str	r2, [r3, #32]
 8002614:	e00e      	b.n	8002634 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	621a      	str	r2, [r3, #32]
 8002620:	e008      	b.n	8002634 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	1c59      	adds	r1, r3, #1
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6211      	str	r1, [r2, #32]
 800262c:	781a      	ldrb	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29b      	uxth	r3, r3
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	4619      	mov	r1, r3
 8002642:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10f      	bne.n	8002668 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002656:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002666:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	e000      	b.n	800266e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800266c:	2302      	movs	r3, #2
  }
}
 800266e:	4618      	mov	r0, r3
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800268e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ff0b 	bl	80024b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b22      	cmp	r3, #34	; 0x22
 80026ba:	d171      	bne.n	80027a0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c4:	d123      	bne.n	800270e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10e      	bne.n	80026f2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	1c9a      	adds	r2, r3, #2
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	629a      	str	r2, [r3, #40]	; 0x28
 80026f0:	e029      	b.n	8002746 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	629a      	str	r2, [r3, #40]	; 0x28
 800270c:	e01b      	b.n	8002746 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10a      	bne.n	800272c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6858      	ldr	r0, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	1c59      	adds	r1, r3, #1
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6291      	str	r1, [r2, #40]	; 0x28
 8002726:	b2c2      	uxtb	r2, r0
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	e00c      	b.n	8002746 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	b2da      	uxtb	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	1c58      	adds	r0, r3, #1
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	6288      	str	r0, [r1, #40]	; 0x28
 800273e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	b29b      	uxth	r3, r3
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	4619      	mov	r1, r3
 8002754:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002756:	2b00      	cmp	r3, #0
 8002758:	d120      	bne.n	800279c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0220 	bic.w	r2, r2, #32
 8002768:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002778:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0201 	bic.w	r2, r2, #1
 8002788:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7fd fd28 	bl	80001e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	e002      	b.n	80027a2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	e000      	b.n	80027a2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80027a0:	2302      	movs	r3, #2
  }
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80027e6:	f023 030c 	bic.w	r3, r3, #12
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	68f9      	ldr	r1, [r7, #12]
 80027f0:	430b      	orrs	r3, r1
 80027f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a52      	ldr	r2, [pc, #328]	; (8002958 <UART_SetConfig+0x1ac>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d14e      	bne.n	80028b2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002814:	f7ff f820 	bl	8001858 <HAL_RCC_GetPCLK2Freq>
 8002818:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	009a      	lsls	r2, r3, #2
 8002824:	441a      	add	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002830:	4a4a      	ldr	r2, [pc, #296]	; (800295c <UART_SetConfig+0x1b0>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	0119      	lsls	r1, r3, #4
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	009a      	lsls	r2, r3, #2
 8002844:	441a      	add	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002850:	4b42      	ldr	r3, [pc, #264]	; (800295c <UART_SetConfig+0x1b0>)
 8002852:	fba3 0302 	umull	r0, r3, r3, r2
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	2064      	movs	r0, #100	; 0x64
 800285a:	fb00 f303 	mul.w	r3, r0, r3
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	3332      	adds	r3, #50	; 0x32
 8002864:	4a3d      	ldr	r2, [pc, #244]	; (800295c <UART_SetConfig+0x1b0>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002870:	4419      	add	r1, r3
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	009a      	lsls	r2, r3, #2
 800287c:	441a      	add	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	fbb2 f2f3 	udiv	r2, r2, r3
 8002888:	4b34      	ldr	r3, [pc, #208]	; (800295c <UART_SetConfig+0x1b0>)
 800288a:	fba3 0302 	umull	r0, r3, r3, r2
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	2064      	movs	r0, #100	; 0x64
 8002892:	fb00 f303 	mul.w	r3, r0, r3
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	3332      	adds	r3, #50	; 0x32
 800289c:	4a2f      	ldr	r2, [pc, #188]	; (800295c <UART_SetConfig+0x1b0>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	f003 020f 	and.w	r2, r3, #15
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	440a      	add	r2, r1
 80028ae:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80028b0:	e04d      	b.n	800294e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80028b2:	f7fe ffbd 	bl	8001830 <HAL_RCC_GetPCLK1Freq>
 80028b6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	009a      	lsls	r2, r3, #2
 80028c2:	441a      	add	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ce:	4a23      	ldr	r2, [pc, #140]	; (800295c <UART_SetConfig+0x1b0>)
 80028d0:	fba2 2303 	umull	r2, r3, r2, r3
 80028d4:	095b      	lsrs	r3, r3, #5
 80028d6:	0119      	lsls	r1, r3, #4
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	009a      	lsls	r2, r3, #2
 80028e2:	441a      	add	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ee:	4b1b      	ldr	r3, [pc, #108]	; (800295c <UART_SetConfig+0x1b0>)
 80028f0:	fba3 0302 	umull	r0, r3, r3, r2
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	2064      	movs	r0, #100	; 0x64
 80028f8:	fb00 f303 	mul.w	r3, r0, r3
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	3332      	adds	r3, #50	; 0x32
 8002902:	4a16      	ldr	r2, [pc, #88]	; (800295c <UART_SetConfig+0x1b0>)
 8002904:	fba2 2303 	umull	r2, r3, r2, r3
 8002908:	095b      	lsrs	r3, r3, #5
 800290a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800290e:	4419      	add	r1, r3
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	009a      	lsls	r2, r3, #2
 800291a:	441a      	add	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	fbb2 f2f3 	udiv	r2, r2, r3
 8002926:	4b0d      	ldr	r3, [pc, #52]	; (800295c <UART_SetConfig+0x1b0>)
 8002928:	fba3 0302 	umull	r0, r3, r3, r2
 800292c:	095b      	lsrs	r3, r3, #5
 800292e:	2064      	movs	r0, #100	; 0x64
 8002930:	fb00 f303 	mul.w	r3, r0, r3
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	3332      	adds	r3, #50	; 0x32
 800293a:	4a08      	ldr	r2, [pc, #32]	; (800295c <UART_SetConfig+0x1b0>)
 800293c:	fba2 2303 	umull	r2, r3, r2, r3
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	f003 020f 	and.w	r2, r3, #15
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	440a      	add	r2, r1
 800294c:	609a      	str	r2, [r3, #8]
}
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40013800 	.word	0x40013800
 800295c:	51eb851f 	.word	0x51eb851f

08002960 <__errno>:
 8002960:	4b01      	ldr	r3, [pc, #4]	; (8002968 <__errno+0x8>)
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	2000000c 	.word	0x2000000c

0800296c <__libc_init_array>:
 800296c:	b570      	push	{r4, r5, r6, lr}
 800296e:	2500      	movs	r5, #0
 8002970:	4e0c      	ldr	r6, [pc, #48]	; (80029a4 <__libc_init_array+0x38>)
 8002972:	4c0d      	ldr	r4, [pc, #52]	; (80029a8 <__libc_init_array+0x3c>)
 8002974:	1ba4      	subs	r4, r4, r6
 8002976:	10a4      	asrs	r4, r4, #2
 8002978:	42a5      	cmp	r5, r4
 800297a:	d109      	bne.n	8002990 <__libc_init_array+0x24>
 800297c:	f000 fd3e 	bl	80033fc <_init>
 8002980:	2500      	movs	r5, #0
 8002982:	4e0a      	ldr	r6, [pc, #40]	; (80029ac <__libc_init_array+0x40>)
 8002984:	4c0a      	ldr	r4, [pc, #40]	; (80029b0 <__libc_init_array+0x44>)
 8002986:	1ba4      	subs	r4, r4, r6
 8002988:	10a4      	asrs	r4, r4, #2
 800298a:	42a5      	cmp	r5, r4
 800298c:	d105      	bne.n	800299a <__libc_init_array+0x2e>
 800298e:	bd70      	pop	{r4, r5, r6, pc}
 8002990:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002994:	4798      	blx	r3
 8002996:	3501      	adds	r5, #1
 8002998:	e7ee      	b.n	8002978 <__libc_init_array+0xc>
 800299a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800299e:	4798      	blx	r3
 80029a0:	3501      	adds	r5, #1
 80029a2:	e7f2      	b.n	800298a <__libc_init_array+0x1e>
 80029a4:	080034dc 	.word	0x080034dc
 80029a8:	080034dc 	.word	0x080034dc
 80029ac:	080034dc 	.word	0x080034dc
 80029b0:	080034e0 	.word	0x080034e0

080029b4 <memset>:
 80029b4:	4603      	mov	r3, r0
 80029b6:	4402      	add	r2, r0
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d100      	bne.n	80029be <memset+0xa>
 80029bc:	4770      	bx	lr
 80029be:	f803 1b01 	strb.w	r1, [r3], #1
 80029c2:	e7f9      	b.n	80029b8 <memset+0x4>

080029c4 <_puts_r>:
 80029c4:	b570      	push	{r4, r5, r6, lr}
 80029c6:	460e      	mov	r6, r1
 80029c8:	4605      	mov	r5, r0
 80029ca:	b118      	cbz	r0, 80029d4 <_puts_r+0x10>
 80029cc:	6983      	ldr	r3, [r0, #24]
 80029ce:	b90b      	cbnz	r3, 80029d4 <_puts_r+0x10>
 80029d0:	f000 faba 	bl	8002f48 <__sinit>
 80029d4:	69ab      	ldr	r3, [r5, #24]
 80029d6:	68ac      	ldr	r4, [r5, #8]
 80029d8:	b913      	cbnz	r3, 80029e0 <_puts_r+0x1c>
 80029da:	4628      	mov	r0, r5
 80029dc:	f000 fab4 	bl	8002f48 <__sinit>
 80029e0:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <_puts_r+0xac>)
 80029e2:	429c      	cmp	r4, r3
 80029e4:	d117      	bne.n	8002a16 <_puts_r+0x52>
 80029e6:	686c      	ldr	r4, [r5, #4]
 80029e8:	89a3      	ldrh	r3, [r4, #12]
 80029ea:	071b      	lsls	r3, r3, #28
 80029ec:	d51d      	bpl.n	8002a2a <_puts_r+0x66>
 80029ee:	6923      	ldr	r3, [r4, #16]
 80029f0:	b1db      	cbz	r3, 8002a2a <_puts_r+0x66>
 80029f2:	3e01      	subs	r6, #1
 80029f4:	68a3      	ldr	r3, [r4, #8]
 80029f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80029fa:	3b01      	subs	r3, #1
 80029fc:	60a3      	str	r3, [r4, #8]
 80029fe:	b9e9      	cbnz	r1, 8002a3c <_puts_r+0x78>
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	da2e      	bge.n	8002a62 <_puts_r+0x9e>
 8002a04:	4622      	mov	r2, r4
 8002a06:	210a      	movs	r1, #10
 8002a08:	4628      	mov	r0, r5
 8002a0a:	f000 f8ed 	bl	8002be8 <__swbuf_r>
 8002a0e:	3001      	adds	r0, #1
 8002a10:	d011      	beq.n	8002a36 <_puts_r+0x72>
 8002a12:	200a      	movs	r0, #10
 8002a14:	e011      	b.n	8002a3a <_puts_r+0x76>
 8002a16:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <_puts_r+0xb0>)
 8002a18:	429c      	cmp	r4, r3
 8002a1a:	d101      	bne.n	8002a20 <_puts_r+0x5c>
 8002a1c:	68ac      	ldr	r4, [r5, #8]
 8002a1e:	e7e3      	b.n	80029e8 <_puts_r+0x24>
 8002a20:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <_puts_r+0xb4>)
 8002a22:	429c      	cmp	r4, r3
 8002a24:	bf08      	it	eq
 8002a26:	68ec      	ldreq	r4, [r5, #12]
 8002a28:	e7de      	b.n	80029e8 <_puts_r+0x24>
 8002a2a:	4621      	mov	r1, r4
 8002a2c:	4628      	mov	r0, r5
 8002a2e:	f000 f92d 	bl	8002c8c <__swsetup_r>
 8002a32:	2800      	cmp	r0, #0
 8002a34:	d0dd      	beq.n	80029f2 <_puts_r+0x2e>
 8002a36:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3a:	bd70      	pop	{r4, r5, r6, pc}
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	da04      	bge.n	8002a4a <_puts_r+0x86>
 8002a40:	69a2      	ldr	r2, [r4, #24]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	dc06      	bgt.n	8002a54 <_puts_r+0x90>
 8002a46:	290a      	cmp	r1, #10
 8002a48:	d004      	beq.n	8002a54 <_puts_r+0x90>
 8002a4a:	6823      	ldr	r3, [r4, #0]
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	6022      	str	r2, [r4, #0]
 8002a50:	7019      	strb	r1, [r3, #0]
 8002a52:	e7cf      	b.n	80029f4 <_puts_r+0x30>
 8002a54:	4622      	mov	r2, r4
 8002a56:	4628      	mov	r0, r5
 8002a58:	f000 f8c6 	bl	8002be8 <__swbuf_r>
 8002a5c:	3001      	adds	r0, #1
 8002a5e:	d1c9      	bne.n	80029f4 <_puts_r+0x30>
 8002a60:	e7e9      	b.n	8002a36 <_puts_r+0x72>
 8002a62:	200a      	movs	r0, #10
 8002a64:	6823      	ldr	r3, [r4, #0]
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	6022      	str	r2, [r4, #0]
 8002a6a:	7018      	strb	r0, [r3, #0]
 8002a6c:	e7e5      	b.n	8002a3a <_puts_r+0x76>
 8002a6e:	bf00      	nop
 8002a70:	0800349c 	.word	0x0800349c
 8002a74:	080034bc 	.word	0x080034bc
 8002a78:	0800347c 	.word	0x0800347c

08002a7c <puts>:
 8002a7c:	4b02      	ldr	r3, [pc, #8]	; (8002a88 <puts+0xc>)
 8002a7e:	4601      	mov	r1, r0
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	f7ff bf9f 	b.w	80029c4 <_puts_r>
 8002a86:	bf00      	nop
 8002a88:	2000000c 	.word	0x2000000c

08002a8c <setvbuf>:
 8002a8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002a90:	461d      	mov	r5, r3
 8002a92:	4b51      	ldr	r3, [pc, #324]	; (8002bd8 <setvbuf+0x14c>)
 8002a94:	4604      	mov	r4, r0
 8002a96:	681e      	ldr	r6, [r3, #0]
 8002a98:	460f      	mov	r7, r1
 8002a9a:	4690      	mov	r8, r2
 8002a9c:	b126      	cbz	r6, 8002aa8 <setvbuf+0x1c>
 8002a9e:	69b3      	ldr	r3, [r6, #24]
 8002aa0:	b913      	cbnz	r3, 8002aa8 <setvbuf+0x1c>
 8002aa2:	4630      	mov	r0, r6
 8002aa4:	f000 fa50 	bl	8002f48 <__sinit>
 8002aa8:	4b4c      	ldr	r3, [pc, #304]	; (8002bdc <setvbuf+0x150>)
 8002aaa:	429c      	cmp	r4, r3
 8002aac:	d152      	bne.n	8002b54 <setvbuf+0xc8>
 8002aae:	6874      	ldr	r4, [r6, #4]
 8002ab0:	f1b8 0f02 	cmp.w	r8, #2
 8002ab4:	d006      	beq.n	8002ac4 <setvbuf+0x38>
 8002ab6:	f1b8 0f01 	cmp.w	r8, #1
 8002aba:	f200 8089 	bhi.w	8002bd0 <setvbuf+0x144>
 8002abe:	2d00      	cmp	r5, #0
 8002ac0:	f2c0 8086 	blt.w	8002bd0 <setvbuf+0x144>
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	4630      	mov	r0, r6
 8002ac8:	f000 f9d4 	bl	8002e74 <_fflush_r>
 8002acc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ace:	b141      	cbz	r1, 8002ae2 <setvbuf+0x56>
 8002ad0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ad4:	4299      	cmp	r1, r3
 8002ad6:	d002      	beq.n	8002ade <setvbuf+0x52>
 8002ad8:	4630      	mov	r0, r6
 8002ada:	f000 fb2b 	bl	8003134 <_free_r>
 8002ade:	2300      	movs	r3, #0
 8002ae0:	6363      	str	r3, [r4, #52]	; 0x34
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61a3      	str	r3, [r4, #24]
 8002ae6:	6063      	str	r3, [r4, #4]
 8002ae8:	89a3      	ldrh	r3, [r4, #12]
 8002aea:	061b      	lsls	r3, r3, #24
 8002aec:	d503      	bpl.n	8002af6 <setvbuf+0x6a>
 8002aee:	6921      	ldr	r1, [r4, #16]
 8002af0:	4630      	mov	r0, r6
 8002af2:	f000 fb1f 	bl	8003134 <_free_r>
 8002af6:	89a3      	ldrh	r3, [r4, #12]
 8002af8:	f1b8 0f02 	cmp.w	r8, #2
 8002afc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002b00:	f023 0303 	bic.w	r3, r3, #3
 8002b04:	81a3      	strh	r3, [r4, #12]
 8002b06:	d05d      	beq.n	8002bc4 <setvbuf+0x138>
 8002b08:	ab01      	add	r3, sp, #4
 8002b0a:	466a      	mov	r2, sp
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	4630      	mov	r0, r6
 8002b10:	f000 faa4 	bl	800305c <__swhatbuf_r>
 8002b14:	89a3      	ldrh	r3, [r4, #12]
 8002b16:	4318      	orrs	r0, r3
 8002b18:	81a0      	strh	r0, [r4, #12]
 8002b1a:	bb2d      	cbnz	r5, 8002b68 <setvbuf+0xdc>
 8002b1c:	9d00      	ldr	r5, [sp, #0]
 8002b1e:	4628      	mov	r0, r5
 8002b20:	f000 fb00 	bl	8003124 <malloc>
 8002b24:	4607      	mov	r7, r0
 8002b26:	2800      	cmp	r0, #0
 8002b28:	d14e      	bne.n	8002bc8 <setvbuf+0x13c>
 8002b2a:	f8dd 9000 	ldr.w	r9, [sp]
 8002b2e:	45a9      	cmp	r9, r5
 8002b30:	d13c      	bne.n	8002bac <setvbuf+0x120>
 8002b32:	f04f 30ff 	mov.w	r0, #4294967295
 8002b36:	89a3      	ldrh	r3, [r4, #12]
 8002b38:	f043 0302 	orr.w	r3, r3, #2
 8002b3c:	81a3      	strh	r3, [r4, #12]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60a3      	str	r3, [r4, #8]
 8002b42:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002b46:	6023      	str	r3, [r4, #0]
 8002b48:	6123      	str	r3, [r4, #16]
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	6163      	str	r3, [r4, #20]
 8002b4e:	b003      	add	sp, #12
 8002b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b54:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <setvbuf+0x154>)
 8002b56:	429c      	cmp	r4, r3
 8002b58:	d101      	bne.n	8002b5e <setvbuf+0xd2>
 8002b5a:	68b4      	ldr	r4, [r6, #8]
 8002b5c:	e7a8      	b.n	8002ab0 <setvbuf+0x24>
 8002b5e:	4b21      	ldr	r3, [pc, #132]	; (8002be4 <setvbuf+0x158>)
 8002b60:	429c      	cmp	r4, r3
 8002b62:	bf08      	it	eq
 8002b64:	68f4      	ldreq	r4, [r6, #12]
 8002b66:	e7a3      	b.n	8002ab0 <setvbuf+0x24>
 8002b68:	2f00      	cmp	r7, #0
 8002b6a:	d0d8      	beq.n	8002b1e <setvbuf+0x92>
 8002b6c:	69b3      	ldr	r3, [r6, #24]
 8002b6e:	b913      	cbnz	r3, 8002b76 <setvbuf+0xea>
 8002b70:	4630      	mov	r0, r6
 8002b72:	f000 f9e9 	bl	8002f48 <__sinit>
 8002b76:	f1b8 0f01 	cmp.w	r8, #1
 8002b7a:	bf08      	it	eq
 8002b7c:	89a3      	ldrheq	r3, [r4, #12]
 8002b7e:	6027      	str	r7, [r4, #0]
 8002b80:	bf04      	itt	eq
 8002b82:	f043 0301 	orreq.w	r3, r3, #1
 8002b86:	81a3      	strheq	r3, [r4, #12]
 8002b88:	89a3      	ldrh	r3, [r4, #12]
 8002b8a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8002b8e:	f013 0008 	ands.w	r0, r3, #8
 8002b92:	d01b      	beq.n	8002bcc <setvbuf+0x140>
 8002b94:	f013 0001 	ands.w	r0, r3, #1
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	bf1f      	itttt	ne
 8002b9e:	426d      	negne	r5, r5
 8002ba0:	60a3      	strne	r3, [r4, #8]
 8002ba2:	61a5      	strne	r5, [r4, #24]
 8002ba4:	4618      	movne	r0, r3
 8002ba6:	bf08      	it	eq
 8002ba8:	60a5      	streq	r5, [r4, #8]
 8002baa:	e7d0      	b.n	8002b4e <setvbuf+0xc2>
 8002bac:	4648      	mov	r0, r9
 8002bae:	f000 fab9 	bl	8003124 <malloc>
 8002bb2:	4607      	mov	r7, r0
 8002bb4:	2800      	cmp	r0, #0
 8002bb6:	d0bc      	beq.n	8002b32 <setvbuf+0xa6>
 8002bb8:	89a3      	ldrh	r3, [r4, #12]
 8002bba:	464d      	mov	r5, r9
 8002bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc0:	81a3      	strh	r3, [r4, #12]
 8002bc2:	e7d3      	b.n	8002b6c <setvbuf+0xe0>
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	e7b6      	b.n	8002b36 <setvbuf+0xaa>
 8002bc8:	46a9      	mov	r9, r5
 8002bca:	e7f5      	b.n	8002bb8 <setvbuf+0x12c>
 8002bcc:	60a0      	str	r0, [r4, #8]
 8002bce:	e7be      	b.n	8002b4e <setvbuf+0xc2>
 8002bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd4:	e7bb      	b.n	8002b4e <setvbuf+0xc2>
 8002bd6:	bf00      	nop
 8002bd8:	2000000c 	.word	0x2000000c
 8002bdc:	0800349c 	.word	0x0800349c
 8002be0:	080034bc 	.word	0x080034bc
 8002be4:	0800347c 	.word	0x0800347c

08002be8 <__swbuf_r>:
 8002be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bea:	460e      	mov	r6, r1
 8002bec:	4614      	mov	r4, r2
 8002bee:	4605      	mov	r5, r0
 8002bf0:	b118      	cbz	r0, 8002bfa <__swbuf_r+0x12>
 8002bf2:	6983      	ldr	r3, [r0, #24]
 8002bf4:	b90b      	cbnz	r3, 8002bfa <__swbuf_r+0x12>
 8002bf6:	f000 f9a7 	bl	8002f48 <__sinit>
 8002bfa:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <__swbuf_r+0x98>)
 8002bfc:	429c      	cmp	r4, r3
 8002bfe:	d12a      	bne.n	8002c56 <__swbuf_r+0x6e>
 8002c00:	686c      	ldr	r4, [r5, #4]
 8002c02:	69a3      	ldr	r3, [r4, #24]
 8002c04:	60a3      	str	r3, [r4, #8]
 8002c06:	89a3      	ldrh	r3, [r4, #12]
 8002c08:	071a      	lsls	r2, r3, #28
 8002c0a:	d52e      	bpl.n	8002c6a <__swbuf_r+0x82>
 8002c0c:	6923      	ldr	r3, [r4, #16]
 8002c0e:	b363      	cbz	r3, 8002c6a <__swbuf_r+0x82>
 8002c10:	6923      	ldr	r3, [r4, #16]
 8002c12:	6820      	ldr	r0, [r4, #0]
 8002c14:	b2f6      	uxtb	r6, r6
 8002c16:	1ac0      	subs	r0, r0, r3
 8002c18:	6963      	ldr	r3, [r4, #20]
 8002c1a:	4637      	mov	r7, r6
 8002c1c:	4283      	cmp	r3, r0
 8002c1e:	dc04      	bgt.n	8002c2a <__swbuf_r+0x42>
 8002c20:	4621      	mov	r1, r4
 8002c22:	4628      	mov	r0, r5
 8002c24:	f000 f926 	bl	8002e74 <_fflush_r>
 8002c28:	bb28      	cbnz	r0, 8002c76 <__swbuf_r+0x8e>
 8002c2a:	68a3      	ldr	r3, [r4, #8]
 8002c2c:	3001      	adds	r0, #1
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	60a3      	str	r3, [r4, #8]
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	6022      	str	r2, [r4, #0]
 8002c38:	701e      	strb	r6, [r3, #0]
 8002c3a:	6963      	ldr	r3, [r4, #20]
 8002c3c:	4283      	cmp	r3, r0
 8002c3e:	d004      	beq.n	8002c4a <__swbuf_r+0x62>
 8002c40:	89a3      	ldrh	r3, [r4, #12]
 8002c42:	07db      	lsls	r3, r3, #31
 8002c44:	d519      	bpl.n	8002c7a <__swbuf_r+0x92>
 8002c46:	2e0a      	cmp	r6, #10
 8002c48:	d117      	bne.n	8002c7a <__swbuf_r+0x92>
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	4628      	mov	r0, r5
 8002c4e:	f000 f911 	bl	8002e74 <_fflush_r>
 8002c52:	b190      	cbz	r0, 8002c7a <__swbuf_r+0x92>
 8002c54:	e00f      	b.n	8002c76 <__swbuf_r+0x8e>
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <__swbuf_r+0x9c>)
 8002c58:	429c      	cmp	r4, r3
 8002c5a:	d101      	bne.n	8002c60 <__swbuf_r+0x78>
 8002c5c:	68ac      	ldr	r4, [r5, #8]
 8002c5e:	e7d0      	b.n	8002c02 <__swbuf_r+0x1a>
 8002c60:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <__swbuf_r+0xa0>)
 8002c62:	429c      	cmp	r4, r3
 8002c64:	bf08      	it	eq
 8002c66:	68ec      	ldreq	r4, [r5, #12]
 8002c68:	e7cb      	b.n	8002c02 <__swbuf_r+0x1a>
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	f000 f80d 	bl	8002c8c <__swsetup_r>
 8002c72:	2800      	cmp	r0, #0
 8002c74:	d0cc      	beq.n	8002c10 <__swbuf_r+0x28>
 8002c76:	f04f 37ff 	mov.w	r7, #4294967295
 8002c7a:	4638      	mov	r0, r7
 8002c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	0800349c 	.word	0x0800349c
 8002c84:	080034bc 	.word	0x080034bc
 8002c88:	0800347c 	.word	0x0800347c

08002c8c <__swsetup_r>:
 8002c8c:	4b32      	ldr	r3, [pc, #200]	; (8002d58 <__swsetup_r+0xcc>)
 8002c8e:	b570      	push	{r4, r5, r6, lr}
 8002c90:	681d      	ldr	r5, [r3, #0]
 8002c92:	4606      	mov	r6, r0
 8002c94:	460c      	mov	r4, r1
 8002c96:	b125      	cbz	r5, 8002ca2 <__swsetup_r+0x16>
 8002c98:	69ab      	ldr	r3, [r5, #24]
 8002c9a:	b913      	cbnz	r3, 8002ca2 <__swsetup_r+0x16>
 8002c9c:	4628      	mov	r0, r5
 8002c9e:	f000 f953 	bl	8002f48 <__sinit>
 8002ca2:	4b2e      	ldr	r3, [pc, #184]	; (8002d5c <__swsetup_r+0xd0>)
 8002ca4:	429c      	cmp	r4, r3
 8002ca6:	d10f      	bne.n	8002cc8 <__swsetup_r+0x3c>
 8002ca8:	686c      	ldr	r4, [r5, #4]
 8002caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	0715      	lsls	r5, r2, #28
 8002cb2:	d42c      	bmi.n	8002d0e <__swsetup_r+0x82>
 8002cb4:	06d0      	lsls	r0, r2, #27
 8002cb6:	d411      	bmi.n	8002cdc <__swsetup_r+0x50>
 8002cb8:	2209      	movs	r2, #9
 8002cba:	6032      	str	r2, [r6, #0]
 8002cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cc0:	81a3      	strh	r3, [r4, #12]
 8002cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc6:	e03e      	b.n	8002d46 <__swsetup_r+0xba>
 8002cc8:	4b25      	ldr	r3, [pc, #148]	; (8002d60 <__swsetup_r+0xd4>)
 8002cca:	429c      	cmp	r4, r3
 8002ccc:	d101      	bne.n	8002cd2 <__swsetup_r+0x46>
 8002cce:	68ac      	ldr	r4, [r5, #8]
 8002cd0:	e7eb      	b.n	8002caa <__swsetup_r+0x1e>
 8002cd2:	4b24      	ldr	r3, [pc, #144]	; (8002d64 <__swsetup_r+0xd8>)
 8002cd4:	429c      	cmp	r4, r3
 8002cd6:	bf08      	it	eq
 8002cd8:	68ec      	ldreq	r4, [r5, #12]
 8002cda:	e7e6      	b.n	8002caa <__swsetup_r+0x1e>
 8002cdc:	0751      	lsls	r1, r2, #29
 8002cde:	d512      	bpl.n	8002d06 <__swsetup_r+0x7a>
 8002ce0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ce2:	b141      	cbz	r1, 8002cf6 <__swsetup_r+0x6a>
 8002ce4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ce8:	4299      	cmp	r1, r3
 8002cea:	d002      	beq.n	8002cf2 <__swsetup_r+0x66>
 8002cec:	4630      	mov	r0, r6
 8002cee:	f000 fa21 	bl	8003134 <_free_r>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	6363      	str	r3, [r4, #52]	; 0x34
 8002cf6:	89a3      	ldrh	r3, [r4, #12]
 8002cf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002cfc:	81a3      	strh	r3, [r4, #12]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	6063      	str	r3, [r4, #4]
 8002d02:	6923      	ldr	r3, [r4, #16]
 8002d04:	6023      	str	r3, [r4, #0]
 8002d06:	89a3      	ldrh	r3, [r4, #12]
 8002d08:	f043 0308 	orr.w	r3, r3, #8
 8002d0c:	81a3      	strh	r3, [r4, #12]
 8002d0e:	6923      	ldr	r3, [r4, #16]
 8002d10:	b94b      	cbnz	r3, 8002d26 <__swsetup_r+0x9a>
 8002d12:	89a3      	ldrh	r3, [r4, #12]
 8002d14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d1c:	d003      	beq.n	8002d26 <__swsetup_r+0x9a>
 8002d1e:	4621      	mov	r1, r4
 8002d20:	4630      	mov	r0, r6
 8002d22:	f000 f9bf 	bl	80030a4 <__smakebuf_r>
 8002d26:	89a2      	ldrh	r2, [r4, #12]
 8002d28:	f012 0301 	ands.w	r3, r2, #1
 8002d2c:	d00c      	beq.n	8002d48 <__swsetup_r+0xbc>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60a3      	str	r3, [r4, #8]
 8002d32:	6963      	ldr	r3, [r4, #20]
 8002d34:	425b      	negs	r3, r3
 8002d36:	61a3      	str	r3, [r4, #24]
 8002d38:	6923      	ldr	r3, [r4, #16]
 8002d3a:	b953      	cbnz	r3, 8002d52 <__swsetup_r+0xc6>
 8002d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d40:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002d44:	d1ba      	bne.n	8002cbc <__swsetup_r+0x30>
 8002d46:	bd70      	pop	{r4, r5, r6, pc}
 8002d48:	0792      	lsls	r2, r2, #30
 8002d4a:	bf58      	it	pl
 8002d4c:	6963      	ldrpl	r3, [r4, #20]
 8002d4e:	60a3      	str	r3, [r4, #8]
 8002d50:	e7f2      	b.n	8002d38 <__swsetup_r+0xac>
 8002d52:	2000      	movs	r0, #0
 8002d54:	e7f7      	b.n	8002d46 <__swsetup_r+0xba>
 8002d56:	bf00      	nop
 8002d58:	2000000c 	.word	0x2000000c
 8002d5c:	0800349c 	.word	0x0800349c
 8002d60:	080034bc 	.word	0x080034bc
 8002d64:	0800347c 	.word	0x0800347c

08002d68 <__sflush_r>:
 8002d68:	898a      	ldrh	r2, [r1, #12]
 8002d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d6e:	4605      	mov	r5, r0
 8002d70:	0710      	lsls	r0, r2, #28
 8002d72:	460c      	mov	r4, r1
 8002d74:	d458      	bmi.n	8002e28 <__sflush_r+0xc0>
 8002d76:	684b      	ldr	r3, [r1, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	dc05      	bgt.n	8002d88 <__sflush_r+0x20>
 8002d7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	dc02      	bgt.n	8002d88 <__sflush_r+0x20>
 8002d82:	2000      	movs	r0, #0
 8002d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d8a:	2e00      	cmp	r6, #0
 8002d8c:	d0f9      	beq.n	8002d82 <__sflush_r+0x1a>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d94:	682f      	ldr	r7, [r5, #0]
 8002d96:	6a21      	ldr	r1, [r4, #32]
 8002d98:	602b      	str	r3, [r5, #0]
 8002d9a:	d032      	beq.n	8002e02 <__sflush_r+0x9a>
 8002d9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d9e:	89a3      	ldrh	r3, [r4, #12]
 8002da0:	075a      	lsls	r2, r3, #29
 8002da2:	d505      	bpl.n	8002db0 <__sflush_r+0x48>
 8002da4:	6863      	ldr	r3, [r4, #4]
 8002da6:	1ac0      	subs	r0, r0, r3
 8002da8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002daa:	b10b      	cbz	r3, 8002db0 <__sflush_r+0x48>
 8002dac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002dae:	1ac0      	subs	r0, r0, r3
 8002db0:	2300      	movs	r3, #0
 8002db2:	4602      	mov	r2, r0
 8002db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002db6:	6a21      	ldr	r1, [r4, #32]
 8002db8:	4628      	mov	r0, r5
 8002dba:	47b0      	blx	r6
 8002dbc:	1c43      	adds	r3, r0, #1
 8002dbe:	89a3      	ldrh	r3, [r4, #12]
 8002dc0:	d106      	bne.n	8002dd0 <__sflush_r+0x68>
 8002dc2:	6829      	ldr	r1, [r5, #0]
 8002dc4:	291d      	cmp	r1, #29
 8002dc6:	d848      	bhi.n	8002e5a <__sflush_r+0xf2>
 8002dc8:	4a29      	ldr	r2, [pc, #164]	; (8002e70 <__sflush_r+0x108>)
 8002dca:	40ca      	lsrs	r2, r1
 8002dcc:	07d6      	lsls	r6, r2, #31
 8002dce:	d544      	bpl.n	8002e5a <__sflush_r+0xf2>
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	6062      	str	r2, [r4, #4]
 8002dd4:	6922      	ldr	r2, [r4, #16]
 8002dd6:	04d9      	lsls	r1, r3, #19
 8002dd8:	6022      	str	r2, [r4, #0]
 8002dda:	d504      	bpl.n	8002de6 <__sflush_r+0x7e>
 8002ddc:	1c42      	adds	r2, r0, #1
 8002dde:	d101      	bne.n	8002de4 <__sflush_r+0x7c>
 8002de0:	682b      	ldr	r3, [r5, #0]
 8002de2:	b903      	cbnz	r3, 8002de6 <__sflush_r+0x7e>
 8002de4:	6560      	str	r0, [r4, #84]	; 0x54
 8002de6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002de8:	602f      	str	r7, [r5, #0]
 8002dea:	2900      	cmp	r1, #0
 8002dec:	d0c9      	beq.n	8002d82 <__sflush_r+0x1a>
 8002dee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002df2:	4299      	cmp	r1, r3
 8002df4:	d002      	beq.n	8002dfc <__sflush_r+0x94>
 8002df6:	4628      	mov	r0, r5
 8002df8:	f000 f99c 	bl	8003134 <_free_r>
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	6360      	str	r0, [r4, #52]	; 0x34
 8002e00:	e7c0      	b.n	8002d84 <__sflush_r+0x1c>
 8002e02:	2301      	movs	r3, #1
 8002e04:	4628      	mov	r0, r5
 8002e06:	47b0      	blx	r6
 8002e08:	1c41      	adds	r1, r0, #1
 8002e0a:	d1c8      	bne.n	8002d9e <__sflush_r+0x36>
 8002e0c:	682b      	ldr	r3, [r5, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0c5      	beq.n	8002d9e <__sflush_r+0x36>
 8002e12:	2b1d      	cmp	r3, #29
 8002e14:	d001      	beq.n	8002e1a <__sflush_r+0xb2>
 8002e16:	2b16      	cmp	r3, #22
 8002e18:	d101      	bne.n	8002e1e <__sflush_r+0xb6>
 8002e1a:	602f      	str	r7, [r5, #0]
 8002e1c:	e7b1      	b.n	8002d82 <__sflush_r+0x1a>
 8002e1e:	89a3      	ldrh	r3, [r4, #12]
 8002e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e24:	81a3      	strh	r3, [r4, #12]
 8002e26:	e7ad      	b.n	8002d84 <__sflush_r+0x1c>
 8002e28:	690f      	ldr	r7, [r1, #16]
 8002e2a:	2f00      	cmp	r7, #0
 8002e2c:	d0a9      	beq.n	8002d82 <__sflush_r+0x1a>
 8002e2e:	0793      	lsls	r3, r2, #30
 8002e30:	bf18      	it	ne
 8002e32:	2300      	movne	r3, #0
 8002e34:	680e      	ldr	r6, [r1, #0]
 8002e36:	bf08      	it	eq
 8002e38:	694b      	ldreq	r3, [r1, #20]
 8002e3a:	eba6 0807 	sub.w	r8, r6, r7
 8002e3e:	600f      	str	r7, [r1, #0]
 8002e40:	608b      	str	r3, [r1, #8]
 8002e42:	f1b8 0f00 	cmp.w	r8, #0
 8002e46:	dd9c      	ble.n	8002d82 <__sflush_r+0x1a>
 8002e48:	4643      	mov	r3, r8
 8002e4a:	463a      	mov	r2, r7
 8002e4c:	6a21      	ldr	r1, [r4, #32]
 8002e4e:	4628      	mov	r0, r5
 8002e50:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002e52:	47b0      	blx	r6
 8002e54:	2800      	cmp	r0, #0
 8002e56:	dc06      	bgt.n	8002e66 <__sflush_r+0xfe>
 8002e58:	89a3      	ldrh	r3, [r4, #12]
 8002e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e5e:	81a3      	strh	r3, [r4, #12]
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295
 8002e64:	e78e      	b.n	8002d84 <__sflush_r+0x1c>
 8002e66:	4407      	add	r7, r0
 8002e68:	eba8 0800 	sub.w	r8, r8, r0
 8002e6c:	e7e9      	b.n	8002e42 <__sflush_r+0xda>
 8002e6e:	bf00      	nop
 8002e70:	20400001 	.word	0x20400001

08002e74 <_fflush_r>:
 8002e74:	b538      	push	{r3, r4, r5, lr}
 8002e76:	690b      	ldr	r3, [r1, #16]
 8002e78:	4605      	mov	r5, r0
 8002e7a:	460c      	mov	r4, r1
 8002e7c:	b1db      	cbz	r3, 8002eb6 <_fflush_r+0x42>
 8002e7e:	b118      	cbz	r0, 8002e88 <_fflush_r+0x14>
 8002e80:	6983      	ldr	r3, [r0, #24]
 8002e82:	b90b      	cbnz	r3, 8002e88 <_fflush_r+0x14>
 8002e84:	f000 f860 	bl	8002f48 <__sinit>
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <_fflush_r+0x48>)
 8002e8a:	429c      	cmp	r4, r3
 8002e8c:	d109      	bne.n	8002ea2 <_fflush_r+0x2e>
 8002e8e:	686c      	ldr	r4, [r5, #4]
 8002e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e94:	b17b      	cbz	r3, 8002eb6 <_fflush_r+0x42>
 8002e96:	4621      	mov	r1, r4
 8002e98:	4628      	mov	r0, r5
 8002e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e9e:	f7ff bf63 	b.w	8002d68 <__sflush_r>
 8002ea2:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <_fflush_r+0x4c>)
 8002ea4:	429c      	cmp	r4, r3
 8002ea6:	d101      	bne.n	8002eac <_fflush_r+0x38>
 8002ea8:	68ac      	ldr	r4, [r5, #8]
 8002eaa:	e7f1      	b.n	8002e90 <_fflush_r+0x1c>
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <_fflush_r+0x50>)
 8002eae:	429c      	cmp	r4, r3
 8002eb0:	bf08      	it	eq
 8002eb2:	68ec      	ldreq	r4, [r5, #12]
 8002eb4:	e7ec      	b.n	8002e90 <_fflush_r+0x1c>
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	bd38      	pop	{r3, r4, r5, pc}
 8002eba:	bf00      	nop
 8002ebc:	0800349c 	.word	0x0800349c
 8002ec0:	080034bc 	.word	0x080034bc
 8002ec4:	0800347c 	.word	0x0800347c

08002ec8 <std>:
 8002ec8:	2300      	movs	r3, #0
 8002eca:	b510      	push	{r4, lr}
 8002ecc:	4604      	mov	r4, r0
 8002ece:	e9c0 3300 	strd	r3, r3, [r0]
 8002ed2:	6083      	str	r3, [r0, #8]
 8002ed4:	8181      	strh	r1, [r0, #12]
 8002ed6:	6643      	str	r3, [r0, #100]	; 0x64
 8002ed8:	81c2      	strh	r2, [r0, #14]
 8002eda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ede:	6183      	str	r3, [r0, #24]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	2208      	movs	r2, #8
 8002ee4:	305c      	adds	r0, #92	; 0x5c
 8002ee6:	f7ff fd65 	bl	80029b4 <memset>
 8002eea:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <std+0x38>)
 8002eec:	6224      	str	r4, [r4, #32]
 8002eee:	6263      	str	r3, [r4, #36]	; 0x24
 8002ef0:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <std+0x3c>)
 8002ef2:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ef4:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <std+0x40>)
 8002ef6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ef8:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <std+0x44>)
 8002efa:	6323      	str	r3, [r4, #48]	; 0x30
 8002efc:	bd10      	pop	{r4, pc}
 8002efe:	bf00      	nop
 8002f00:	080032a1 	.word	0x080032a1
 8002f04:	080032c3 	.word	0x080032c3
 8002f08:	080032fb 	.word	0x080032fb
 8002f0c:	0800331f 	.word	0x0800331f

08002f10 <_cleanup_r>:
 8002f10:	4901      	ldr	r1, [pc, #4]	; (8002f18 <_cleanup_r+0x8>)
 8002f12:	f000 b885 	b.w	8003020 <_fwalk_reent>
 8002f16:	bf00      	nop
 8002f18:	08002e75 	.word	0x08002e75

08002f1c <__sfmoreglue>:
 8002f1c:	b570      	push	{r4, r5, r6, lr}
 8002f1e:	2568      	movs	r5, #104	; 0x68
 8002f20:	1e4a      	subs	r2, r1, #1
 8002f22:	4355      	muls	r5, r2
 8002f24:	460e      	mov	r6, r1
 8002f26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002f2a:	f000 f94f 	bl	80031cc <_malloc_r>
 8002f2e:	4604      	mov	r4, r0
 8002f30:	b140      	cbz	r0, 8002f44 <__sfmoreglue+0x28>
 8002f32:	2100      	movs	r1, #0
 8002f34:	e9c0 1600 	strd	r1, r6, [r0]
 8002f38:	300c      	adds	r0, #12
 8002f3a:	60a0      	str	r0, [r4, #8]
 8002f3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002f40:	f7ff fd38 	bl	80029b4 <memset>
 8002f44:	4620      	mov	r0, r4
 8002f46:	bd70      	pop	{r4, r5, r6, pc}

08002f48 <__sinit>:
 8002f48:	6983      	ldr	r3, [r0, #24]
 8002f4a:	b510      	push	{r4, lr}
 8002f4c:	4604      	mov	r4, r0
 8002f4e:	bb33      	cbnz	r3, 8002f9e <__sinit+0x56>
 8002f50:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002f54:	6503      	str	r3, [r0, #80]	; 0x50
 8002f56:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <__sinit+0x58>)
 8002f58:	4a12      	ldr	r2, [pc, #72]	; (8002fa4 <__sinit+0x5c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6282      	str	r2, [r0, #40]	; 0x28
 8002f5e:	4298      	cmp	r0, r3
 8002f60:	bf04      	itt	eq
 8002f62:	2301      	moveq	r3, #1
 8002f64:	6183      	streq	r3, [r0, #24]
 8002f66:	f000 f81f 	bl	8002fa8 <__sfp>
 8002f6a:	6060      	str	r0, [r4, #4]
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	f000 f81b 	bl	8002fa8 <__sfp>
 8002f72:	60a0      	str	r0, [r4, #8]
 8002f74:	4620      	mov	r0, r4
 8002f76:	f000 f817 	bl	8002fa8 <__sfp>
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	60e0      	str	r0, [r4, #12]
 8002f7e:	2104      	movs	r1, #4
 8002f80:	6860      	ldr	r0, [r4, #4]
 8002f82:	f7ff ffa1 	bl	8002ec8 <std>
 8002f86:	2201      	movs	r2, #1
 8002f88:	2109      	movs	r1, #9
 8002f8a:	68a0      	ldr	r0, [r4, #8]
 8002f8c:	f7ff ff9c 	bl	8002ec8 <std>
 8002f90:	2202      	movs	r2, #2
 8002f92:	2112      	movs	r1, #18
 8002f94:	68e0      	ldr	r0, [r4, #12]
 8002f96:	f7ff ff97 	bl	8002ec8 <std>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	61a3      	str	r3, [r4, #24]
 8002f9e:	bd10      	pop	{r4, pc}
 8002fa0:	08003478 	.word	0x08003478
 8002fa4:	08002f11 	.word	0x08002f11

08002fa8 <__sfp>:
 8002fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002faa:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <__sfp+0x70>)
 8002fac:	4607      	mov	r7, r0
 8002fae:	681e      	ldr	r6, [r3, #0]
 8002fb0:	69b3      	ldr	r3, [r6, #24]
 8002fb2:	b913      	cbnz	r3, 8002fba <__sfp+0x12>
 8002fb4:	4630      	mov	r0, r6
 8002fb6:	f7ff ffc7 	bl	8002f48 <__sinit>
 8002fba:	3648      	adds	r6, #72	; 0x48
 8002fbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	d503      	bpl.n	8002fcc <__sfp+0x24>
 8002fc4:	6833      	ldr	r3, [r6, #0]
 8002fc6:	b133      	cbz	r3, 8002fd6 <__sfp+0x2e>
 8002fc8:	6836      	ldr	r6, [r6, #0]
 8002fca:	e7f7      	b.n	8002fbc <__sfp+0x14>
 8002fcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002fd0:	b16d      	cbz	r5, 8002fee <__sfp+0x46>
 8002fd2:	3468      	adds	r4, #104	; 0x68
 8002fd4:	e7f4      	b.n	8002fc0 <__sfp+0x18>
 8002fd6:	2104      	movs	r1, #4
 8002fd8:	4638      	mov	r0, r7
 8002fda:	f7ff ff9f 	bl	8002f1c <__sfmoreglue>
 8002fde:	6030      	str	r0, [r6, #0]
 8002fe0:	2800      	cmp	r0, #0
 8002fe2:	d1f1      	bne.n	8002fc8 <__sfp+0x20>
 8002fe4:	230c      	movs	r3, #12
 8002fe6:	4604      	mov	r4, r0
 8002fe8:	603b      	str	r3, [r7, #0]
 8002fea:	4620      	mov	r0, r4
 8002fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fee:	4b0b      	ldr	r3, [pc, #44]	; (800301c <__sfp+0x74>)
 8002ff0:	6665      	str	r5, [r4, #100]	; 0x64
 8002ff2:	e9c4 5500 	strd	r5, r5, [r4]
 8002ff6:	60a5      	str	r5, [r4, #8]
 8002ff8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002ffc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003000:	2208      	movs	r2, #8
 8003002:	4629      	mov	r1, r5
 8003004:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003008:	f7ff fcd4 	bl	80029b4 <memset>
 800300c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003010:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003014:	e7e9      	b.n	8002fea <__sfp+0x42>
 8003016:	bf00      	nop
 8003018:	08003478 	.word	0x08003478
 800301c:	ffff0001 	.word	0xffff0001

08003020 <_fwalk_reent>:
 8003020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003024:	4680      	mov	r8, r0
 8003026:	4689      	mov	r9, r1
 8003028:	2600      	movs	r6, #0
 800302a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800302e:	b914      	cbnz	r4, 8003036 <_fwalk_reent+0x16>
 8003030:	4630      	mov	r0, r6
 8003032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003036:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800303a:	3f01      	subs	r7, #1
 800303c:	d501      	bpl.n	8003042 <_fwalk_reent+0x22>
 800303e:	6824      	ldr	r4, [r4, #0]
 8003040:	e7f5      	b.n	800302e <_fwalk_reent+0xe>
 8003042:	89ab      	ldrh	r3, [r5, #12]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d907      	bls.n	8003058 <_fwalk_reent+0x38>
 8003048:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800304c:	3301      	adds	r3, #1
 800304e:	d003      	beq.n	8003058 <_fwalk_reent+0x38>
 8003050:	4629      	mov	r1, r5
 8003052:	4640      	mov	r0, r8
 8003054:	47c8      	blx	r9
 8003056:	4306      	orrs	r6, r0
 8003058:	3568      	adds	r5, #104	; 0x68
 800305a:	e7ee      	b.n	800303a <_fwalk_reent+0x1a>

0800305c <__swhatbuf_r>:
 800305c:	b570      	push	{r4, r5, r6, lr}
 800305e:	460e      	mov	r6, r1
 8003060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003064:	b096      	sub	sp, #88	; 0x58
 8003066:	2900      	cmp	r1, #0
 8003068:	4614      	mov	r4, r2
 800306a:	461d      	mov	r5, r3
 800306c:	da07      	bge.n	800307e <__swhatbuf_r+0x22>
 800306e:	2300      	movs	r3, #0
 8003070:	602b      	str	r3, [r5, #0]
 8003072:	89b3      	ldrh	r3, [r6, #12]
 8003074:	061a      	lsls	r2, r3, #24
 8003076:	d410      	bmi.n	800309a <__swhatbuf_r+0x3e>
 8003078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800307c:	e00e      	b.n	800309c <__swhatbuf_r+0x40>
 800307e:	466a      	mov	r2, sp
 8003080:	f000 f974 	bl	800336c <_fstat_r>
 8003084:	2800      	cmp	r0, #0
 8003086:	dbf2      	blt.n	800306e <__swhatbuf_r+0x12>
 8003088:	9a01      	ldr	r2, [sp, #4]
 800308a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800308e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003092:	425a      	negs	r2, r3
 8003094:	415a      	adcs	r2, r3
 8003096:	602a      	str	r2, [r5, #0]
 8003098:	e7ee      	b.n	8003078 <__swhatbuf_r+0x1c>
 800309a:	2340      	movs	r3, #64	; 0x40
 800309c:	2000      	movs	r0, #0
 800309e:	6023      	str	r3, [r4, #0]
 80030a0:	b016      	add	sp, #88	; 0x58
 80030a2:	bd70      	pop	{r4, r5, r6, pc}

080030a4 <__smakebuf_r>:
 80030a4:	898b      	ldrh	r3, [r1, #12]
 80030a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80030a8:	079d      	lsls	r5, r3, #30
 80030aa:	4606      	mov	r6, r0
 80030ac:	460c      	mov	r4, r1
 80030ae:	d507      	bpl.n	80030c0 <__smakebuf_r+0x1c>
 80030b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80030b4:	6023      	str	r3, [r4, #0]
 80030b6:	6123      	str	r3, [r4, #16]
 80030b8:	2301      	movs	r3, #1
 80030ba:	6163      	str	r3, [r4, #20]
 80030bc:	b002      	add	sp, #8
 80030be:	bd70      	pop	{r4, r5, r6, pc}
 80030c0:	ab01      	add	r3, sp, #4
 80030c2:	466a      	mov	r2, sp
 80030c4:	f7ff ffca 	bl	800305c <__swhatbuf_r>
 80030c8:	9900      	ldr	r1, [sp, #0]
 80030ca:	4605      	mov	r5, r0
 80030cc:	4630      	mov	r0, r6
 80030ce:	f000 f87d 	bl	80031cc <_malloc_r>
 80030d2:	b948      	cbnz	r0, 80030e8 <__smakebuf_r+0x44>
 80030d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030d8:	059a      	lsls	r2, r3, #22
 80030da:	d4ef      	bmi.n	80030bc <__smakebuf_r+0x18>
 80030dc:	f023 0303 	bic.w	r3, r3, #3
 80030e0:	f043 0302 	orr.w	r3, r3, #2
 80030e4:	81a3      	strh	r3, [r4, #12]
 80030e6:	e7e3      	b.n	80030b0 <__smakebuf_r+0xc>
 80030e8:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <__smakebuf_r+0x7c>)
 80030ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80030ec:	89a3      	ldrh	r3, [r4, #12]
 80030ee:	6020      	str	r0, [r4, #0]
 80030f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f4:	81a3      	strh	r3, [r4, #12]
 80030f6:	9b00      	ldr	r3, [sp, #0]
 80030f8:	6120      	str	r0, [r4, #16]
 80030fa:	6163      	str	r3, [r4, #20]
 80030fc:	9b01      	ldr	r3, [sp, #4]
 80030fe:	b15b      	cbz	r3, 8003118 <__smakebuf_r+0x74>
 8003100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003104:	4630      	mov	r0, r6
 8003106:	f000 f943 	bl	8003390 <_isatty_r>
 800310a:	b128      	cbz	r0, 8003118 <__smakebuf_r+0x74>
 800310c:	89a3      	ldrh	r3, [r4, #12]
 800310e:	f023 0303 	bic.w	r3, r3, #3
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	81a3      	strh	r3, [r4, #12]
 8003118:	89a3      	ldrh	r3, [r4, #12]
 800311a:	431d      	orrs	r5, r3
 800311c:	81a5      	strh	r5, [r4, #12]
 800311e:	e7cd      	b.n	80030bc <__smakebuf_r+0x18>
 8003120:	08002f11 	.word	0x08002f11

08003124 <malloc>:
 8003124:	4b02      	ldr	r3, [pc, #8]	; (8003130 <malloc+0xc>)
 8003126:	4601      	mov	r1, r0
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	f000 b84f 	b.w	80031cc <_malloc_r>
 800312e:	bf00      	nop
 8003130:	2000000c 	.word	0x2000000c

08003134 <_free_r>:
 8003134:	b538      	push	{r3, r4, r5, lr}
 8003136:	4605      	mov	r5, r0
 8003138:	2900      	cmp	r1, #0
 800313a:	d043      	beq.n	80031c4 <_free_r+0x90>
 800313c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003140:	1f0c      	subs	r4, r1, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	bfb8      	it	lt
 8003146:	18e4      	addlt	r4, r4, r3
 8003148:	f000 f944 	bl	80033d4 <__malloc_lock>
 800314c:	4a1e      	ldr	r2, [pc, #120]	; (80031c8 <_free_r+0x94>)
 800314e:	6813      	ldr	r3, [r2, #0]
 8003150:	4610      	mov	r0, r2
 8003152:	b933      	cbnz	r3, 8003162 <_free_r+0x2e>
 8003154:	6063      	str	r3, [r4, #4]
 8003156:	6014      	str	r4, [r2, #0]
 8003158:	4628      	mov	r0, r5
 800315a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800315e:	f000 b93a 	b.w	80033d6 <__malloc_unlock>
 8003162:	42a3      	cmp	r3, r4
 8003164:	d90b      	bls.n	800317e <_free_r+0x4a>
 8003166:	6821      	ldr	r1, [r4, #0]
 8003168:	1862      	adds	r2, r4, r1
 800316a:	4293      	cmp	r3, r2
 800316c:	bf01      	itttt	eq
 800316e:	681a      	ldreq	r2, [r3, #0]
 8003170:	685b      	ldreq	r3, [r3, #4]
 8003172:	1852      	addeq	r2, r2, r1
 8003174:	6022      	streq	r2, [r4, #0]
 8003176:	6063      	str	r3, [r4, #4]
 8003178:	6004      	str	r4, [r0, #0]
 800317a:	e7ed      	b.n	8003158 <_free_r+0x24>
 800317c:	4613      	mov	r3, r2
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	b10a      	cbz	r2, 8003186 <_free_r+0x52>
 8003182:	42a2      	cmp	r2, r4
 8003184:	d9fa      	bls.n	800317c <_free_r+0x48>
 8003186:	6819      	ldr	r1, [r3, #0]
 8003188:	1858      	adds	r0, r3, r1
 800318a:	42a0      	cmp	r0, r4
 800318c:	d10b      	bne.n	80031a6 <_free_r+0x72>
 800318e:	6820      	ldr	r0, [r4, #0]
 8003190:	4401      	add	r1, r0
 8003192:	1858      	adds	r0, r3, r1
 8003194:	4282      	cmp	r2, r0
 8003196:	6019      	str	r1, [r3, #0]
 8003198:	d1de      	bne.n	8003158 <_free_r+0x24>
 800319a:	6810      	ldr	r0, [r2, #0]
 800319c:	6852      	ldr	r2, [r2, #4]
 800319e:	4401      	add	r1, r0
 80031a0:	6019      	str	r1, [r3, #0]
 80031a2:	605a      	str	r2, [r3, #4]
 80031a4:	e7d8      	b.n	8003158 <_free_r+0x24>
 80031a6:	d902      	bls.n	80031ae <_free_r+0x7a>
 80031a8:	230c      	movs	r3, #12
 80031aa:	602b      	str	r3, [r5, #0]
 80031ac:	e7d4      	b.n	8003158 <_free_r+0x24>
 80031ae:	6820      	ldr	r0, [r4, #0]
 80031b0:	1821      	adds	r1, r4, r0
 80031b2:	428a      	cmp	r2, r1
 80031b4:	bf01      	itttt	eq
 80031b6:	6811      	ldreq	r1, [r2, #0]
 80031b8:	6852      	ldreq	r2, [r2, #4]
 80031ba:	1809      	addeq	r1, r1, r0
 80031bc:	6021      	streq	r1, [r4, #0]
 80031be:	6062      	str	r2, [r4, #4]
 80031c0:	605c      	str	r4, [r3, #4]
 80031c2:	e7c9      	b.n	8003158 <_free_r+0x24>
 80031c4:	bd38      	pop	{r3, r4, r5, pc}
 80031c6:	bf00      	nop
 80031c8:	20000090 	.word	0x20000090

080031cc <_malloc_r>:
 80031cc:	b570      	push	{r4, r5, r6, lr}
 80031ce:	1ccd      	adds	r5, r1, #3
 80031d0:	f025 0503 	bic.w	r5, r5, #3
 80031d4:	3508      	adds	r5, #8
 80031d6:	2d0c      	cmp	r5, #12
 80031d8:	bf38      	it	cc
 80031da:	250c      	movcc	r5, #12
 80031dc:	2d00      	cmp	r5, #0
 80031de:	4606      	mov	r6, r0
 80031e0:	db01      	blt.n	80031e6 <_malloc_r+0x1a>
 80031e2:	42a9      	cmp	r1, r5
 80031e4:	d903      	bls.n	80031ee <_malloc_r+0x22>
 80031e6:	230c      	movs	r3, #12
 80031e8:	6033      	str	r3, [r6, #0]
 80031ea:	2000      	movs	r0, #0
 80031ec:	bd70      	pop	{r4, r5, r6, pc}
 80031ee:	f000 f8f1 	bl	80033d4 <__malloc_lock>
 80031f2:	4a21      	ldr	r2, [pc, #132]	; (8003278 <_malloc_r+0xac>)
 80031f4:	6814      	ldr	r4, [r2, #0]
 80031f6:	4621      	mov	r1, r4
 80031f8:	b991      	cbnz	r1, 8003220 <_malloc_r+0x54>
 80031fa:	4c20      	ldr	r4, [pc, #128]	; (800327c <_malloc_r+0xb0>)
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	b91b      	cbnz	r3, 8003208 <_malloc_r+0x3c>
 8003200:	4630      	mov	r0, r6
 8003202:	f000 f83d 	bl	8003280 <_sbrk_r>
 8003206:	6020      	str	r0, [r4, #0]
 8003208:	4629      	mov	r1, r5
 800320a:	4630      	mov	r0, r6
 800320c:	f000 f838 	bl	8003280 <_sbrk_r>
 8003210:	1c43      	adds	r3, r0, #1
 8003212:	d124      	bne.n	800325e <_malloc_r+0x92>
 8003214:	230c      	movs	r3, #12
 8003216:	4630      	mov	r0, r6
 8003218:	6033      	str	r3, [r6, #0]
 800321a:	f000 f8dc 	bl	80033d6 <__malloc_unlock>
 800321e:	e7e4      	b.n	80031ea <_malloc_r+0x1e>
 8003220:	680b      	ldr	r3, [r1, #0]
 8003222:	1b5b      	subs	r3, r3, r5
 8003224:	d418      	bmi.n	8003258 <_malloc_r+0x8c>
 8003226:	2b0b      	cmp	r3, #11
 8003228:	d90f      	bls.n	800324a <_malloc_r+0x7e>
 800322a:	600b      	str	r3, [r1, #0]
 800322c:	18cc      	adds	r4, r1, r3
 800322e:	50cd      	str	r5, [r1, r3]
 8003230:	4630      	mov	r0, r6
 8003232:	f000 f8d0 	bl	80033d6 <__malloc_unlock>
 8003236:	f104 000b 	add.w	r0, r4, #11
 800323a:	1d23      	adds	r3, r4, #4
 800323c:	f020 0007 	bic.w	r0, r0, #7
 8003240:	1ac3      	subs	r3, r0, r3
 8003242:	d0d3      	beq.n	80031ec <_malloc_r+0x20>
 8003244:	425a      	negs	r2, r3
 8003246:	50e2      	str	r2, [r4, r3]
 8003248:	e7d0      	b.n	80031ec <_malloc_r+0x20>
 800324a:	684b      	ldr	r3, [r1, #4]
 800324c:	428c      	cmp	r4, r1
 800324e:	bf16      	itet	ne
 8003250:	6063      	strne	r3, [r4, #4]
 8003252:	6013      	streq	r3, [r2, #0]
 8003254:	460c      	movne	r4, r1
 8003256:	e7eb      	b.n	8003230 <_malloc_r+0x64>
 8003258:	460c      	mov	r4, r1
 800325a:	6849      	ldr	r1, [r1, #4]
 800325c:	e7cc      	b.n	80031f8 <_malloc_r+0x2c>
 800325e:	1cc4      	adds	r4, r0, #3
 8003260:	f024 0403 	bic.w	r4, r4, #3
 8003264:	42a0      	cmp	r0, r4
 8003266:	d005      	beq.n	8003274 <_malloc_r+0xa8>
 8003268:	1a21      	subs	r1, r4, r0
 800326a:	4630      	mov	r0, r6
 800326c:	f000 f808 	bl	8003280 <_sbrk_r>
 8003270:	3001      	adds	r0, #1
 8003272:	d0cf      	beq.n	8003214 <_malloc_r+0x48>
 8003274:	6025      	str	r5, [r4, #0]
 8003276:	e7db      	b.n	8003230 <_malloc_r+0x64>
 8003278:	20000090 	.word	0x20000090
 800327c:	20000094 	.word	0x20000094

08003280 <_sbrk_r>:
 8003280:	b538      	push	{r3, r4, r5, lr}
 8003282:	2300      	movs	r3, #0
 8003284:	4c05      	ldr	r4, [pc, #20]	; (800329c <_sbrk_r+0x1c>)
 8003286:	4605      	mov	r5, r0
 8003288:	4608      	mov	r0, r1
 800328a:	6023      	str	r3, [r4, #0]
 800328c:	f7fd fafa 	bl	8000884 <_sbrk>
 8003290:	1c43      	adds	r3, r0, #1
 8003292:	d102      	bne.n	800329a <_sbrk_r+0x1a>
 8003294:	6823      	ldr	r3, [r4, #0]
 8003296:	b103      	cbz	r3, 800329a <_sbrk_r+0x1a>
 8003298:	602b      	str	r3, [r5, #0]
 800329a:	bd38      	pop	{r3, r4, r5, pc}
 800329c:	2000013c 	.word	0x2000013c

080032a0 <__sread>:
 80032a0:	b510      	push	{r4, lr}
 80032a2:	460c      	mov	r4, r1
 80032a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032a8:	f000 f896 	bl	80033d8 <_read_r>
 80032ac:	2800      	cmp	r0, #0
 80032ae:	bfab      	itete	ge
 80032b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80032b2:	89a3      	ldrhlt	r3, [r4, #12]
 80032b4:	181b      	addge	r3, r3, r0
 80032b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80032ba:	bfac      	ite	ge
 80032bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80032be:	81a3      	strhlt	r3, [r4, #12]
 80032c0:	bd10      	pop	{r4, pc}

080032c2 <__swrite>:
 80032c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032c6:	461f      	mov	r7, r3
 80032c8:	898b      	ldrh	r3, [r1, #12]
 80032ca:	4605      	mov	r5, r0
 80032cc:	05db      	lsls	r3, r3, #23
 80032ce:	460c      	mov	r4, r1
 80032d0:	4616      	mov	r6, r2
 80032d2:	d505      	bpl.n	80032e0 <__swrite+0x1e>
 80032d4:	2302      	movs	r3, #2
 80032d6:	2200      	movs	r2, #0
 80032d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032dc:	f000 f868 	bl	80033b0 <_lseek_r>
 80032e0:	89a3      	ldrh	r3, [r4, #12]
 80032e2:	4632      	mov	r2, r6
 80032e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032e8:	81a3      	strh	r3, [r4, #12]
 80032ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032ee:	463b      	mov	r3, r7
 80032f0:	4628      	mov	r0, r5
 80032f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032f6:	f000 b817 	b.w	8003328 <_write_r>

080032fa <__sseek>:
 80032fa:	b510      	push	{r4, lr}
 80032fc:	460c      	mov	r4, r1
 80032fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003302:	f000 f855 	bl	80033b0 <_lseek_r>
 8003306:	1c43      	adds	r3, r0, #1
 8003308:	89a3      	ldrh	r3, [r4, #12]
 800330a:	bf15      	itete	ne
 800330c:	6560      	strne	r0, [r4, #84]	; 0x54
 800330e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003312:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003316:	81a3      	strheq	r3, [r4, #12]
 8003318:	bf18      	it	ne
 800331a:	81a3      	strhne	r3, [r4, #12]
 800331c:	bd10      	pop	{r4, pc}

0800331e <__sclose>:
 800331e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003322:	f000 b813 	b.w	800334c <_close_r>
	...

08003328 <_write_r>:
 8003328:	b538      	push	{r3, r4, r5, lr}
 800332a:	4605      	mov	r5, r0
 800332c:	4608      	mov	r0, r1
 800332e:	4611      	mov	r1, r2
 8003330:	2200      	movs	r2, #0
 8003332:	4c05      	ldr	r4, [pc, #20]	; (8003348 <_write_r+0x20>)
 8003334:	6022      	str	r2, [r4, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	f7fd f906 	bl	8000548 <_write>
 800333c:	1c43      	adds	r3, r0, #1
 800333e:	d102      	bne.n	8003346 <_write_r+0x1e>
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	b103      	cbz	r3, 8003346 <_write_r+0x1e>
 8003344:	602b      	str	r3, [r5, #0]
 8003346:	bd38      	pop	{r3, r4, r5, pc}
 8003348:	2000013c 	.word	0x2000013c

0800334c <_close_r>:
 800334c:	b538      	push	{r3, r4, r5, lr}
 800334e:	2300      	movs	r3, #0
 8003350:	4c05      	ldr	r4, [pc, #20]	; (8003368 <_close_r+0x1c>)
 8003352:	4605      	mov	r5, r0
 8003354:	4608      	mov	r0, r1
 8003356:	6023      	str	r3, [r4, #0]
 8003358:	f7fd f922 	bl	80005a0 <_close>
 800335c:	1c43      	adds	r3, r0, #1
 800335e:	d102      	bne.n	8003366 <_close_r+0x1a>
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	b103      	cbz	r3, 8003366 <_close_r+0x1a>
 8003364:	602b      	str	r3, [r5, #0]
 8003366:	bd38      	pop	{r3, r4, r5, pc}
 8003368:	2000013c 	.word	0x2000013c

0800336c <_fstat_r>:
 800336c:	b538      	push	{r3, r4, r5, lr}
 800336e:	2300      	movs	r3, #0
 8003370:	4c06      	ldr	r4, [pc, #24]	; (800338c <_fstat_r+0x20>)
 8003372:	4605      	mov	r5, r0
 8003374:	4608      	mov	r0, r1
 8003376:	4611      	mov	r1, r2
 8003378:	6023      	str	r3, [r4, #0]
 800337a:	f7fd f961 	bl	8000640 <_fstat>
 800337e:	1c43      	adds	r3, r0, #1
 8003380:	d102      	bne.n	8003388 <_fstat_r+0x1c>
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	b103      	cbz	r3, 8003388 <_fstat_r+0x1c>
 8003386:	602b      	str	r3, [r5, #0]
 8003388:	bd38      	pop	{r3, r4, r5, pc}
 800338a:	bf00      	nop
 800338c:	2000013c 	.word	0x2000013c

08003390 <_isatty_r>:
 8003390:	b538      	push	{r3, r4, r5, lr}
 8003392:	2300      	movs	r3, #0
 8003394:	4c05      	ldr	r4, [pc, #20]	; (80033ac <_isatty_r+0x1c>)
 8003396:	4605      	mov	r5, r0
 8003398:	4608      	mov	r0, r1
 800339a:	6023      	str	r3, [r4, #0]
 800339c:	f7fd f8be 	bl	800051c <_isatty>
 80033a0:	1c43      	adds	r3, r0, #1
 80033a2:	d102      	bne.n	80033aa <_isatty_r+0x1a>
 80033a4:	6823      	ldr	r3, [r4, #0]
 80033a6:	b103      	cbz	r3, 80033aa <_isatty_r+0x1a>
 80033a8:	602b      	str	r3, [r5, #0]
 80033aa:	bd38      	pop	{r3, r4, r5, pc}
 80033ac:	2000013c 	.word	0x2000013c

080033b0 <_lseek_r>:
 80033b0:	b538      	push	{r3, r4, r5, lr}
 80033b2:	4605      	mov	r5, r0
 80033b4:	4608      	mov	r0, r1
 80033b6:	4611      	mov	r1, r2
 80033b8:	2200      	movs	r2, #0
 80033ba:	4c05      	ldr	r4, [pc, #20]	; (80033d0 <_lseek_r+0x20>)
 80033bc:	6022      	str	r2, [r4, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	f7fd f905 	bl	80005ce <_lseek>
 80033c4:	1c43      	adds	r3, r0, #1
 80033c6:	d102      	bne.n	80033ce <_lseek_r+0x1e>
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	b103      	cbz	r3, 80033ce <_lseek_r+0x1e>
 80033cc:	602b      	str	r3, [r5, #0]
 80033ce:	bd38      	pop	{r3, r4, r5, pc}
 80033d0:	2000013c 	.word	0x2000013c

080033d4 <__malloc_lock>:
 80033d4:	4770      	bx	lr

080033d6 <__malloc_unlock>:
 80033d6:	4770      	bx	lr

080033d8 <_read_r>:
 80033d8:	b538      	push	{r3, r4, r5, lr}
 80033da:	4605      	mov	r5, r0
 80033dc:	4608      	mov	r0, r1
 80033de:	4611      	mov	r1, r2
 80033e0:	2200      	movs	r2, #0
 80033e2:	4c05      	ldr	r4, [pc, #20]	; (80033f8 <_read_r+0x20>)
 80033e4:	6022      	str	r2, [r4, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f7fd f902 	bl	80005f0 <_read>
 80033ec:	1c43      	adds	r3, r0, #1
 80033ee:	d102      	bne.n	80033f6 <_read_r+0x1e>
 80033f0:	6823      	ldr	r3, [r4, #0]
 80033f2:	b103      	cbz	r3, 80033f6 <_read_r+0x1e>
 80033f4:	602b      	str	r3, [r5, #0]
 80033f6:	bd38      	pop	{r3, r4, r5, pc}
 80033f8:	2000013c 	.word	0x2000013c

080033fc <_init>:
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fe:	bf00      	nop
 8003400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003402:	bc08      	pop	{r3}
 8003404:	469e      	mov	lr, r3
 8003406:	4770      	bx	lr

08003408 <_fini>:
 8003408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340a:	bf00      	nop
 800340c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340e:	bc08      	pop	{r3}
 8003410:	469e      	mov	lr, r3
 8003412:	4770      	bx	lr
